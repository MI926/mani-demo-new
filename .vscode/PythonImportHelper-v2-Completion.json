[
    {
        "label": "match_case",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "cmath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmath",
        "description": "cmath",
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "e",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "randbelow",
        "importPath": "secrets",
        "description": "secrets",
        "isExtraImport": true,
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "remove",
        "importPath": "rembg",
        "description": "rembg",
        "isExtraImport": true,
        "detail": "rembg",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "I",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sha384",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "manie",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "manie",
        "description": "manie",
        "detail": "manie",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "thread",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "mani",
        "description": "mani",
        "isExtraImport": true,
        "detail": "mani",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "100dayschellenge.projects.#Calculator",
        "description": "100dayschellenge.projects.#Calculator",
        "peekOfCode": "choice = input(\"Enter your choice(1/2/3/4): \")\nif choice in ('1', '2', '3', '4'):\n    number1 = float(input(\"Enter first number: \"))\n    number2 = float(input(\"Enter second number: \"))\n    if choice == '1':\n        print(number1, \"+\", number2, \"=\", (number1 + number2))\n    elif choice == '2':\n        print(number1, \"-\", number2, \"=\", (number1 - number2))\n    elif choice == '3':\n        print(number1, \"*\", number2, \"=\", (number1 * number2))",
        "detail": "100dayschellenge.projects.#Calculator",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "description": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = list(x)\nz = \"\"\nk = 0\nfor i in y:\n    if k == 0:\n        z = z + i\n    else:\n        z = z + \"*\" + i \n    k = k + 1",
        "detail": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "description": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "peekOfCode": "y = list(x)\nz = \"\"\nk = 0\nfor i in y:\n    if k == 0:\n        z = z + i\n    else:\n        z = z + \"*\" + i \n    k = k + 1\nprint(z)",
        "detail": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "description": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "peekOfCode": "z = \"\"\nk = 0\nfor i in y:\n    if k == 0:\n        z = z + i\n    else:\n        z = z + \"*\" + i \n    k = k + 1\nprint(z)",
        "detail": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "description": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "peekOfCode": "k = 0\nfor i in y:\n    if k == 0:\n        z = z + i\n    else:\n        z = z + \"*\" + i \n    k = k + 1\nprint(z)",
        "detail": "100dayschellenge.projects.Avoid Last occurrence of delimiter",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Convert Snake case to Pascal case",
        "description": "100dayschellenge.projects.Convert Snake case to Pascal case",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = x.split(\"_\")\nz = \"\"\nfor i in y :\n    a = i.title()\n    z = z + a\nprint(z)",
        "detail": "100dayschellenge.projects.Convert Snake case to Pascal case",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Convert Snake case to Pascal case",
        "description": "100dayschellenge.projects.Convert Snake case to Pascal case",
        "peekOfCode": "y = x.split(\"_\")\nz = \"\"\nfor i in y :\n    a = i.title()\n    z = z + a\nprint(z)",
        "detail": "100dayschellenge.projects.Convert Snake case to Pascal case",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Convert Snake case to Pascal case",
        "description": "100dayschellenge.projects.Convert Snake case to Pascal case",
        "peekOfCode": "z = \"\"\nfor i in y :\n    a = i.title()\n    z = z + a\nprint(z)",
        "detail": "100dayschellenge.projects.Convert Snake case to Pascal case",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Convert numeric words to numbers",
        "description": "100dayschellenge.projects.Convert numeric words to numbers",
        "peekOfCode": "x = input(\"enter the string:- \")\ny = x.split(\" \")\nz = \"\"\nfor i in y:\n    match i:\n        case \"zero\":\n            z = z + \"0\"\n        case \"one\":\n            z = z + \"1\"\n        case \"two\":",
        "detail": "100dayschellenge.projects.Convert numeric words to numbers",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Convert numeric words to numbers",
        "description": "100dayschellenge.projects.Convert numeric words to numbers",
        "peekOfCode": "y = x.split(\" \")\nz = \"\"\nfor i in y:\n    match i:\n        case \"zero\":\n            z = z + \"0\"\n        case \"one\":\n            z = z + \"1\"\n        case \"two\":\n            z = z + \"2\"",
        "detail": "100dayschellenge.projects.Convert numeric words to numbers",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Convert numeric words to numbers",
        "description": "100dayschellenge.projects.Convert numeric words to numbers",
        "peekOfCode": "z = \"\"\nfor i in y:\n    match i:\n        case \"zero\":\n            z = z + \"0\"\n        case \"one\":\n            z = z + \"1\"\n        case \"two\":\n            z = z + \"2\"\n        case \"three\":",
        "detail": "100dayschellenge.projects.Convert numeric words to numbers",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "description": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "peekOfCode": "x = input(\"enter the string\")\ny = input(\"enter the string\")\nz = list(x)\nk = list(y)\naad = \"\"\nnum = 0\nfor m in z:\n    for n in k:\n        if m == n:\n            print(m)",
        "detail": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "description": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "peekOfCode": "y = input(\"enter the string\")\nz = list(x)\nk = list(y)\naad = \"\"\nnum = 0\nfor m in z:\n    for n in k:\n        if m == n:\n            print(m)\n            aad = aad + m ",
        "detail": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "description": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "peekOfCode": "z = list(x)\nk = list(y)\naad = \"\"\nnum = 0\nfor m in z:\n    for n in k:\n        if m == n:\n            print(m)\n            aad = aad + m \n            num = num + 1",
        "detail": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "description": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "peekOfCode": "k = list(y)\naad = \"\"\nnum = 0\nfor m in z:\n    for n in k:\n        if m == n:\n            print(m)\n            aad = aad + m \n            num = num + 1\nprint(aad)",
        "detail": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "documentation": {}
    },
    {
        "label": "aad",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "description": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "peekOfCode": "aad = \"\"\nnum = 0\nfor m in z:\n    for n in k:\n        if m == n:\n            print(m)\n            aad = aad + m \n            num = num + 1\nprint(aad)\nprint(num)",
        "detail": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "description": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "peekOfCode": "num = 0\nfor m in z:\n    for n in k:\n        if m == n:\n            print(m)\n            aad = aad + m \n            num = num + 1\nprint(aad)\nprint(num)",
        "detail": "100dayschellenge.projects.Count the Number of matching characters in a pair of string",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Exceptional Split in String",
        "description": "100dayschellenge.projects.Exceptional Split in String",
        "peekOfCode": "u = input(\"Enter the string: \")\na = input(\"Enter the character: \")\n#print(\"if there any string please write it in double quote\") # NOT REQUIRED\nv = u.split(a)\nx = []\nfor i in v:\n    x\nprint(v)",
        "detail": "100dayschellenge.projects.Exceptional Split in String",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Exceptional Split in String",
        "description": "100dayschellenge.projects.Exceptional Split in String",
        "peekOfCode": "a = input(\"Enter the character: \")\n#print(\"if there any string please write it in double quote\") # NOT REQUIRED\nv = u.split(a)\nx = []\nfor i in v:\n    x\nprint(v)",
        "detail": "100dayschellenge.projects.Exceptional Split in String",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Exceptional Split in String",
        "description": "100dayschellenge.projects.Exceptional Split in String",
        "peekOfCode": "v = u.split(a)\nx = []\nfor i in v:\n    x\nprint(v)",
        "detail": "100dayschellenge.projects.Exceptional Split in String",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Exceptional Split in String",
        "description": "100dayschellenge.projects.Exceptional Split in String",
        "peekOfCode": "x = []\nfor i in v:\n    x\nprint(v)",
        "detail": "100dayschellenge.projects.Exceptional Split in String",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Mutations",
        "description": "100dayschellenge.projects.Mutations",
        "peekOfCode": "x = \"manithetheseeker\"\nb = x[:5] + \" and \" + x[6:]\nprint(b)\nfor i in range(0, len(b)):\n    print (b[i])\nprint(b.count(\"e\"))",
        "detail": "100dayschellenge.projects.Mutations",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Mutations",
        "description": "100dayschellenge.projects.Mutations",
        "peekOfCode": "b = x[:5] + \" and \" + x[6:]\nprint(b)\nfor i in range(0, len(b)):\n    print (b[i])\nprint(b.count(\"e\"))",
        "detail": "100dayschellenge.projects.Mutations",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "description": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "peekOfCode": "x = input(\"enter the string\")\ny = []\nwhile True:\n    a = int(input(\"enters the numbers one by one and at the end enter the negative number to stop the loop\"))\n    if a < 0:\n        break\n    else:\n        y.append(a)\n#y = int(input(\"enter the number of the word which you want to change\"))\na = input(\"enter the word which you want to replace it with\")",
        "detail": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "description": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "peekOfCode": "y = []\nwhile True:\n    a = int(input(\"enters the numbers one by one and at the end enter the negative number to stop the loop\"))\n    if a < 0:\n        break\n    else:\n        y.append(a)\n#y = int(input(\"enter the number of the word which you want to change\"))\na = input(\"enter the word which you want to replace it with\")\n#z = list(y)",
        "detail": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "documentation": {}
    },
    {
        "label": "#y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "description": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "peekOfCode": "#y = int(input(\"enter the number of the word which you want to change\"))\na = input(\"enter the word which you want to replace it with\")\n#z = list(y)\nn = 0\nk = \"\"\n#print(z)\nfor i in x:\n    print(i)\n    if n in y:\n        print(n)",
        "detail": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "description": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "peekOfCode": "a = input(\"enter the word which you want to replace it with\")\n#z = list(y)\nn = 0\nk = \"\"\n#print(z)\nfor i in x:\n    print(i)\n    if n in y:\n        print(n)\n        k = k + a",
        "detail": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "documentation": {}
    },
    {
        "label": "#z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "description": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "peekOfCode": "#z = list(y)\nn = 0\nk = \"\"\n#print(z)\nfor i in x:\n    print(i)\n    if n in y:\n        print(n)\n        k = k + a\n    else:",
        "detail": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "description": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "peekOfCode": "n = 0\nk = \"\"\n#print(z)\nfor i in x:\n    print(i)\n    if n in y:\n        print(n)\n        k = k + a\n    else:\n        k = k + i",
        "detail": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "description": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "peekOfCode": "k = \"\"\n#print(z)\nfor i in x:\n    print(i)\n    if n in y:\n        print(n)\n        k = k + a\n    else:\n        k = k + i\n    n = n + 1 ",
        "detail": "100dayschellenge.projects.Python | Multiple indices Replace in String",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Remove punctuation from string",
        "description": "100dayschellenge.projects.Python | Remove punctuation from string",
        "peekOfCode": "a = input(\"enter the string\")\nb = []\nc = input(\"enter the word which you want to remove\")\nd = \"\"\nfor i in c:\n    b.append(i)\nprint(b)\nfor i in a:\n   if i in b:\n       pass",
        "detail": "100dayschellenge.projects.Python | Remove punctuation from string",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Remove punctuation from string",
        "description": "100dayschellenge.projects.Python | Remove punctuation from string",
        "peekOfCode": "b = []\nc = input(\"enter the word which you want to remove\")\nd = \"\"\nfor i in c:\n    b.append(i)\nprint(b)\nfor i in a:\n   if i in b:\n       pass\n   else:",
        "detail": "100dayschellenge.projects.Python | Remove punctuation from string",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Remove punctuation from string",
        "description": "100dayschellenge.projects.Python | Remove punctuation from string",
        "peekOfCode": "c = input(\"enter the word which you want to remove\")\nd = \"\"\nfor i in c:\n    b.append(i)\nprint(b)\nfor i in a:\n   if i in b:\n       pass\n   else:\n       d = d + i",
        "detail": "100dayschellenge.projects.Python | Remove punctuation from string",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Remove punctuation from string",
        "description": "100dayschellenge.projects.Python | Remove punctuation from string",
        "peekOfCode": "d = \"\"\nfor i in c:\n    b.append(i)\nprint(b)\nfor i in a:\n   if i in b:\n       pass\n   else:\n       d = d + i\nprint(d)",
        "detail": "100dayschellenge.projects.Python | Remove punctuation from string",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Test if string is subset of another",
        "description": "100dayschellenge.projects.Python | Test if string is subset of another",
        "peekOfCode": "a = input(\"enter the string\")\nb = input(\"enter the second string\")\nn = 0\nfor i in b:\n    if i in a:\n        n = n + 1\n#for Python – Check if two strings are Rotationally Equivalent\n\"\"\"if n >= len(a):\n            print(\"both are same\")\n    else:",
        "detail": "100dayschellenge.projects.Python | Test if string is subset of another",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Test if string is subset of another",
        "description": "100dayschellenge.projects.Python | Test if string is subset of another",
        "peekOfCode": "b = input(\"enter the second string\")\nn = 0\nfor i in b:\n    if i in a:\n        n = n + 1\n#for Python – Check if two strings are Rotationally Equivalent\n\"\"\"if n >= len(a):\n            print(\"both are same\")\n    else:\n        print(\"both are not same\")",
        "detail": "100dayschellenge.projects.Python | Test if string is subset of another",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python | Test if string is subset of another",
        "description": "100dayschellenge.projects.Python | Test if string is subset of another",
        "peekOfCode": "n = 0\nfor i in b:\n    if i in a:\n        n = n + 1\n#for Python – Check if two strings are Rotationally Equivalent\n\"\"\"if n >= len(a):\n            print(\"both are same\")\n    else:\n        print(\"both are not same\")\n        \"\"\"",
        "detail": "100dayschellenge.projects.Python | Test if string is subset of another",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Find all duplicate characters in string",
        "description": "100dayschellenge.projects.Python – Find all duplicate characters in string",
        "peekOfCode": "a = input(\"Enter the string\")\nb = \"\"\nfor i in a:\n    c = a.count(i)\n    if i not in b:\n        if c > 1:\n            b = b + i\nprint(b)",
        "detail": "100dayschellenge.projects.Python – Find all duplicate characters in string",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Find all duplicate characters in string",
        "description": "100dayschellenge.projects.Python – Find all duplicate characters in string",
        "peekOfCode": "b = \"\"\nfor i in a:\n    c = a.count(i)\n    if i not in b:\n        if c > 1:\n            b = b + i\nprint(b)",
        "detail": "100dayschellenge.projects.Python – Find all duplicate characters in string",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Remove suffix from string list",
        "description": "100dayschellenge.projects.Python – Remove suffix from string list",
        "peekOfCode": "a = input(\"enter the string\")\nb = a.split(\" \")\nc = input(\"enter the word\")\ne = []\nfor i in b:\n    d = len(i)\n    if i[d - 1] == c:\n        pass\n    else:\n        e.append(i)",
        "detail": "100dayschellenge.projects.Python – Remove suffix from string list",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Remove suffix from string list",
        "description": "100dayschellenge.projects.Python – Remove suffix from string list",
        "peekOfCode": "b = a.split(\" \")\nc = input(\"enter the word\")\ne = []\nfor i in b:\n    d = len(i)\n    if i[d - 1] == c:\n        pass\n    else:\n        e.append(i)\nprint(e)",
        "detail": "100dayschellenge.projects.Python – Remove suffix from string list",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Remove suffix from string list",
        "description": "100dayschellenge.projects.Python – Remove suffix from string list",
        "peekOfCode": "c = input(\"enter the word\")\ne = []\nfor i in b:\n    d = len(i)\n    if i[d - 1] == c:\n        pass\n    else:\n        e.append(i)\nprint(e)",
        "detail": "100dayschellenge.projects.Python – Remove suffix from string list",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Remove suffix from string list",
        "description": "100dayschellenge.projects.Python – Remove suffix from string list",
        "peekOfCode": "e = []\nfor i in b:\n    d = len(i)\n    if i[d - 1] == c:\n        pass\n    else:\n        e.append(i)\nprint(e)",
        "detail": "100dayschellenge.projects.Python – Remove suffix from string list",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "description": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "peekOfCode": "a = input(\"enter the string\")\nb = input(\"enter the  which you want to replaca\")\nc = input(\"enter the word which can replace\")\nd = \"\"\ne = list(b)\nf = []\nn = 0\nfor i in b:\n    print(n)\n    g = (i, c[n])",
        "detail": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "description": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "peekOfCode": "b = input(\"enter the  which you want to replaca\")\nc = input(\"enter the word which can replace\")\nd = \"\"\ne = list(b)\nf = []\nn = 0\nfor i in b:\n    print(n)\n    g = (i, c[n])\n    f.append(g)",
        "detail": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "description": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "peekOfCode": "c = input(\"enter the word which can replace\")\nd = \"\"\ne = list(b)\nf = []\nn = 0\nfor i in b:\n    print(n)\n    g = (i, c[n])\n    f.append(g)\n    n = n + 1",
        "detail": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "description": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "peekOfCode": "d = \"\"\ne = list(b)\nf = []\nn = 0\nfor i in b:\n    print(n)\n    g = (i, c[n])\n    f.append(g)\n    n = n + 1\nprint(f)",
        "detail": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "description": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "peekOfCode": "e = list(b)\nf = []\nn = 0\nfor i in b:\n    print(n)\n    g = (i, c[n])\n    f.append(g)\n    n = n + 1\nprint(f)\nfor i in a:",
        "detail": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "description": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "peekOfCode": "f = []\nn = 0\nfor i in b:\n    print(n)\n    g = (i, c[n])\n    f.append(g)\n    n = n + 1\nprint(f)\nfor i in a:\n    print(i)",
        "detail": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "description": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "peekOfCode": "n = 0\nfor i in b:\n    print(n)\n    g = (i, c[n])\n    f.append(g)\n    n = n + 1\nprint(f)\nfor i in a:\n    print(i)\n    for j in f:",
        "detail": "100dayschellenge.projects.Python – Replace Different characters in String at Once",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "description": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "peekOfCode": "a = input(\"enter the string\")\nb = input(\"enter the word to replacee\")\nc = input(\"enter word by replacwe\")\nd = a.split(\" \")\ne = b.split(\" \")\nf = \"\"\nfor i in d:\n    if i in e:\n        f = f + \" \" + c\n        continue",
        "detail": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "description": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "peekOfCode": "b = input(\"enter the word to replacee\")\nc = input(\"enter word by replacwe\")\nd = a.split(\" \")\ne = b.split(\" \")\nf = \"\"\nfor i in d:\n    if i in e:\n        f = f + \" \" + c\n        continue\n    f = f + \" \" + i",
        "detail": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "description": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "peekOfCode": "c = input(\"enter word by replacwe\")\nd = a.split(\" \")\ne = b.split(\" \")\nf = \"\"\nfor i in d:\n    if i in e:\n        f = f + \" \" + c\n        continue\n    f = f + \" \" + i\nprint(f)",
        "detail": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "description": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "peekOfCode": "d = a.split(\" \")\ne = b.split(\" \")\nf = \"\"\nfor i in d:\n    if i in e:\n        f = f + \" \" + c\n        continue\n    f = f + \" \" + i\nprint(f)",
        "detail": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "description": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "peekOfCode": "e = b.split(\" \")\nf = \"\"\nfor i in d:\n    if i in e:\n        f = f + \" \" + c\n        continue\n    f = f + \" \" + i\nprint(f)",
        "detail": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "description": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "peekOfCode": "f = \"\"\nfor i in d:\n    if i in e:\n        f = f + \" \" + c\n        continue\n    f = f + \" \" + i\nprint(f)",
        "detail": "100dayschellenge.projects.Python – Replace-multiple_words_with_K",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "description": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "peekOfCode": "a = input(\"enter the string\")\nb = input(\"enter the second string which you want to compare\")\nc = len(a)\nprint(c)\nn = 0\nfor i in a:\n    if i in b:\n        n = n + 1\nif n >= c:\n    print(\"both are same\")",
        "detail": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "description": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "peekOfCode": "b = input(\"enter the second string which you want to compare\")\nc = len(a)\nprint(c)\nn = 0\nfor i in a:\n    if i in b:\n        n = n + 1\nif n >= c:\n    print(\"both are same\")",
        "detail": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "description": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "peekOfCode": "c = len(a)\nprint(c)\nn = 0\nfor i in a:\n    if i in b:\n        n = n + 1\nif n >= c:\n    print(\"both are same\")",
        "detail": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "description": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "peekOfCode": "n = 0\nfor i in a:\n    if i in b:\n        n = n + 1\nif n >= c:\n    print(\"both are same\")",
        "detail": "100dayschellenge.projects.Python – Similar characters Strings comparison",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "description": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = input(\"Enter the number: \")\nz = list(x)\nw = 0\nfor i in z:\n    a = x.find(i)\n    print(a)\n    b = x[a:(a + 1)]\n    print(b)\n    if w + len(i) > y:",
        "detail": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "description": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "peekOfCode": "y = input(\"Enter the number: \")\nz = list(x)\nw = 0\nfor i in z:\n    a = x.find(i)\n    print(a)\n    b = x[a:(a + 1)]\n    print(b)\n    if w + len(i) > y:\n'''",
        "detail": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "description": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "peekOfCode": "z = list(x)\nw = 0\nfor i in z:\n    a = x.find(i)\n    print(a)\n    b = x[a:(a + 1)]\n    print(b)\n    if w + len(i) > y:\n'''\n i just dont know the re module and i attempt it after video 99 code wuth harry",
        "detail": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "description": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "peekOfCode": "w = 0\nfor i in z:\n    a = x.find(i)\n    print(a)\n    b = x[a:(a + 1)]\n    print(b)\n    if w + len(i) > y:\n'''\n i just dont know the re module and i attempt it after video 99 code wuth harry\n '''",
        "detail": "100dayschellenge.projects.Python – Successive Characters Frequency",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Ways to remove multiple empty spaces from string List",
        "description": "100dayschellenge.projects.Python – Ways to remove multiple empty spaces from string List",
        "peekOfCode": "a = input(\"enter the string with for different letter use space\")\nb = a.split(\" \")\nc = {}\nfor i in b:\n    for j in i:\n        if j == \" \":\n            pass\n        else:\n            c[i] = \"\"\n            continue",
        "detail": "100dayschellenge.projects.Python – Ways to remove multiple empty spaces from string List",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Ways to remove multiple empty spaces from string List",
        "description": "100dayschellenge.projects.Python – Ways to remove multiple empty spaces from string List",
        "peekOfCode": "b = a.split(\" \")\nc = {}\nfor i in b:\n    for j in i:\n        if j == \" \":\n            pass\n        else:\n            c[i] = \"\"\n            continue\nprint(c)",
        "detail": "100dayschellenge.projects.Python – Ways to remove multiple empty spaces from string List",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Ways to remove multiple empty spaces from string List",
        "description": "100dayschellenge.projects.Python – Ways to remove multiple empty spaces from string List",
        "peekOfCode": "c = {}\nfor i in b:\n    for j in i:\n        if j == \" \":\n            pass\n        else:\n            c[i] = \"\"\n            continue\nprint(c)",
        "detail": "100dayschellenge.projects.Python – Ways to remove multiple empty spaces from string List",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "description": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = x.split(\" \")\nz = {}\nb = 0\nfor i in y:\n    a = x.count(i)\n    #print(a)\n    #print(i)\n    if a >= 0:\n        c = (a, i)",
        "detail": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "description": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "peekOfCode": "y = x.split(\" \")\nz = {}\nb = 0\nfor i in y:\n    a = x.count(i)\n    #print(a)\n    #print(i)\n    if a >= 0:\n        c = (a, i)\n        z[c] = \"\"",
        "detail": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "description": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "peekOfCode": "z = {}\nb = 0\nfor i in y:\n    a = x.count(i)\n    #print(a)\n    #print(i)\n    if a >= 0:\n        c = (a, i)\n        z[c] = \"\"\n    # print(i)",
        "detail": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "description": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "peekOfCode": "b = 0\nfor i in y:\n    a = x.count(i)\n    #print(a)\n    #print(i)\n    if a >= 0:\n        c = (a, i)\n        z[c] = \"\"\n    # print(i)\nprint(z)",
        "detail": "100dayschellenge.projects.Python – Words Frequency in String Shorthands",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Sort String list by K character frequency",
        "description": "100dayschellenge.projects.Sort String list by K character frequency",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = input(\"Enter the letter: \")\nz = x.split(\" \")\nw = {}\nfor i in z:\n    print(i)\n    for j in i:\n        print(j)\n        a = i.count(y)\n        print(a)",
        "detail": "100dayschellenge.projects.Sort String list by K character frequency",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Sort String list by K character frequency",
        "description": "100dayschellenge.projects.Sort String list by K character frequency",
        "peekOfCode": "y = input(\"Enter the letter: \")\nz = x.split(\" \")\nw = {}\nfor i in z:\n    print(i)\n    for j in i:\n        print(j)\n        a = i.count(y)\n        print(a)\n        b = (a, i)",
        "detail": "100dayschellenge.projects.Sort String list by K character frequency",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Sort String list by K character frequency",
        "description": "100dayschellenge.projects.Sort String list by K character frequency",
        "peekOfCode": "z = x.split(\" \")\nw = {}\nfor i in z:\n    print(i)\n    for j in i:\n        print(j)\n        a = i.count(y)\n        print(a)\n        b = (a, i)\n        w[b] = \"\"",
        "detail": "100dayschellenge.projects.Sort String list by K character frequency",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Sort String list by K character frequency",
        "description": "100dayschellenge.projects.Sort String list by K character frequency",
        "peekOfCode": "w = {}\nfor i in z:\n    print(i)\n    for j in i:\n        print(j)\n        a = i.count(y)\n        print(a)\n        b = (a, i)\n        w[b] = \"\"\nprint(w)",
        "detail": "100dayschellenge.projects.Sort String list by K character frequency",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Sort String list by K character frequency",
        "description": "100dayschellenge.projects.Sort String list by K character frequency",
        "peekOfCode": "v = []\n'''for i in w:\n    print(i)\n    c = i[0]\n    c.sort()\n    for j in range (0, max(c)):\n        if i[0] == c[j]:\n            v.append(i)\nprint(v) '''\nprint(sorted(w, key=lambda num: num[0])) ",
        "detail": "100dayschellenge.projects.Sort String list by K character frequency",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Split_and_Join",
        "description": "100dayschellenge.projects.Split_and_Join",
        "peekOfCode": "x = str(input(\"enter the paragraph :- \"))\n# Split the paragraph into words using split() method\nb = x.split(\" \")\n# Print the list of words  \nprint(b)  \n# Join the words using '_'\nc = \"_\".join(b)\n# Print the joined string\nprint(c)\n# Explanation:",
        "detail": "100dayschellenge.projects.Split_and_Join",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Split_and_Join",
        "description": "100dayschellenge.projects.Split_and_Join",
        "peekOfCode": "b = x.split(\" \")\n# Print the list of words  \nprint(b)  \n# Join the words using '_'\nc = \"_\".join(b)\n# Print the joined string\nprint(c)\n# Explanation:\n# 1. Ask the user to input a paragraph and store it in variable x\n# 2. Split the paragraph in x into a list of words using the split() method",
        "detail": "100dayschellenge.projects.Split_and_Join",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Split_and_Join",
        "description": "100dayschellenge.projects.Split_and_Join",
        "peekOfCode": "c = \"_\".join(b)\n# Print the joined string\nprint(c)\n# Explanation:\n# 1. Ask the user to input a paragraph and store it in variable x\n# 2. Split the paragraph in x into a list of words using the split() method\n#    and store the list in variable b\n# 3. Print out the list of words b  \n# 4. Join the list of words b into a string using '_' as the separator\n#    and store the joined string in variable c",
        "detail": "100dayschellenge.projects.Split_and_Join",
        "documentation": {}
    },
    {
        "label": "wrap",
        "kind": 2,
        "importPath": "100dayschellenge.projects.Text_Wrap",
        "description": "100dayschellenge.projects.Text_Wrap",
        "peekOfCode": "def wrap(string, max_width):\n    value = string\n    x = max_width\n    # Wrap this text. \n    wrapper = textwrap.TextWrapper(width=x) \n    string = wrapper.fill(text=value) \n    print (string)\n    b = len(string)\n    if b <= 0:\n        return",
        "detail": "100dayschellenge.projects.Text_Wrap",
        "documentation": {}
    },
    {
        "label": "'''x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Text_Wrap",
        "description": "100dayschellenge.projects.Text_Wrap",
        "peekOfCode": "'''x = input(\"enter the paragraph :- \")\nz = int(input(\"enter the number :- \"))\nfor i in range(1, len(x)):\n    y = z * i\n    m = z * (i - 1)\n    k = [x[m:y]]\n    c = x.__len__()\n    if c - y <= 4:\n        break\n    print(k)'''",
        "detail": "100dayschellenge.projects.Text_Wrap",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Text_Wrap",
        "description": "100dayschellenge.projects.Text_Wrap",
        "peekOfCode": "z = int(input(\"enter the number :- \"))\nfor i in range(1, len(x)):\n    y = z * i\n    m = z * (i - 1)\n    k = [x[m:y]]\n    c = x.__len__()\n    if c - y <= 4:\n        break\n    print(k)'''\n'''import textwrap ",
        "detail": "100dayschellenge.projects.Text_Wrap",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Text_Wrap",
        "description": "100dayschellenge.projects.Text_Wrap",
        "peekOfCode": "value = input(\"enter the paragraph :- \") \nx = int(input())\n# Wrap this text. \nwrapper = textwrap.TextWrapper(width=x) \nstring = wrapper.fill(text=value) \nprint (string) '''\nimport textwrap\ndef wrap(string, max_width):\n    value = string\n    x = max_width",
        "detail": "100dayschellenge.projects.Text_Wrap",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Text_Wrap",
        "description": "100dayschellenge.projects.Text_Wrap",
        "peekOfCode": "x = int(input())\n# Wrap this text. \nwrapper = textwrap.TextWrapper(width=x) \nstring = wrapper.fill(text=value) \nprint (string) '''\nimport textwrap\ndef wrap(string, max_width):\n    value = string\n    x = max_width\n    # Wrap this text. ",
        "detail": "100dayschellenge.projects.Text_Wrap",
        "documentation": {}
    },
    {
        "label": "wrapper",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Text_Wrap",
        "description": "100dayschellenge.projects.Text_Wrap",
        "peekOfCode": "wrapper = textwrap.TextWrapper(width=x) \nstring = wrapper.fill(text=value) \nprint (string) '''\nimport textwrap\ndef wrap(string, max_width):\n    value = string\n    x = max_width\n    # Wrap this text. \n    wrapper = textwrap.TextWrapper(width=x) \n    string = wrapper.fill(text=value) ",
        "detail": "100dayschellenge.projects.Text_Wrap",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Text_Wrap",
        "description": "100dayschellenge.projects.Text_Wrap",
        "peekOfCode": "string = wrapper.fill(text=value) \nprint (string) '''\nimport textwrap\ndef wrap(string, max_width):\n    value = string\n    x = max_width\n    # Wrap this text. \n    wrapper = textwrap.TextWrapper(width=x) \n    string = wrapper.fill(text=value) \n    print (string)",
        "detail": "100dayschellenge.projects.Text_Wrap",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Ways to convert string to dictionary",
        "description": "100dayschellenge.projects.Ways to convert string to dictionary",
        "peekOfCode": "a = input(\"enter the string\")\nb = a.split(\" \")\nn = 0\nc = {}\nfor i in range(len(b)):\n    d = n + 1\n    if d < len(b):\n        c[b[n]] = b[n + 1]\n    n = n + 2\nprint(c)",
        "detail": "100dayschellenge.projects.Ways to convert string to dictionary",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Ways to convert string to dictionary",
        "description": "100dayschellenge.projects.Ways to convert string to dictionary",
        "peekOfCode": "b = a.split(\" \")\nn = 0\nc = {}\nfor i in range(len(b)):\n    d = n + 1\n    if d < len(b):\n        c[b[n]] = b[n + 1]\n    n = n + 2\nprint(c)",
        "detail": "100dayschellenge.projects.Ways to convert string to dictionary",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Ways to convert string to dictionary",
        "description": "100dayschellenge.projects.Ways to convert string to dictionary",
        "peekOfCode": "n = 0\nc = {}\nfor i in range(len(b)):\n    d = n + 1\n    if d < len(b):\n        c[b[n]] = b[n + 1]\n    n = n + 2\nprint(c)",
        "detail": "100dayschellenge.projects.Ways to convert string to dictionary",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.Ways to convert string to dictionary",
        "description": "100dayschellenge.projects.Ways to convert string to dictionary",
        "peekOfCode": "c = {}\nfor i in range(len(b)):\n    d = n + 1\n    if d < len(b):\n        c[b[n]] = b[n + 1]\n    n = n + 2\nprint(c)",
        "detail": "100dayschellenge.projects.Ways to convert string to dictionary",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.What_Your_Name",
        "description": "100dayschellenge.projects.What_Your_Name",
        "peekOfCode": "x = str(input(\"enter the name :- \"))\ny = str(input(\"enter the second name :- \"))  \nz = \"welcome to python world \"\nk = \" this is made by mani\"\nprint(z + \" \" + x + \" \" + y + k)",
        "detail": "100dayschellenge.projects.What_Your_Name",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.What_Your_Name",
        "description": "100dayschellenge.projects.What_Your_Name",
        "peekOfCode": "y = str(input(\"enter the second name :- \"))  \nz = \"welcome to python world \"\nk = \" this is made by mani\"\nprint(z + \" \" + x + \" \" + y + k)",
        "detail": "100dayschellenge.projects.What_Your_Name",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.What_Your_Name",
        "description": "100dayschellenge.projects.What_Your_Name",
        "peekOfCode": "z = \"welcome to python world \"\nk = \" this is made by mani\"\nprint(z + \" \" + x + \" \" + y + k)",
        "detail": "100dayschellenge.projects.What_Your_Name",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.What_Your_Name",
        "description": "100dayschellenge.projects.What_Your_Name",
        "peekOfCode": "k = \" this is made by mani\"\nprint(z + \" \" + x + \" \" + y + k)",
        "detail": "100dayschellenge.projects.What_Your_Name",
        "documentation": {}
    },
    {
        "label": "vowel_count",
        "kind": 2,
        "importPath": "100dayschellenge.projects.all_vowel_containing",
        "description": "100dayschellenge.projects.all_vowel_containing",
        "peekOfCode": "def vowel_count(string):\n    # Convert the string to a list\n    string_list = list(string)\n    # Initialize vowel count to 0\n    vowel_count = 0\n    # Loop through each character in the string\n    for char in string_list:\n        # Check if it is a vowel\n        if char in vowel:\n            # If a vowel, increment the count",
        "detail": "100dayschellenge.projects.all_vowel_containing",
        "documentation": {}
    },
    {
        "label": "vowel",
        "kind": 5,
        "importPath": "100dayschellenge.projects.all_vowel_containing",
        "description": "100dayschellenge.projects.all_vowel_containing",
        "peekOfCode": "vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\ndef vowel_count(string):\n    # Convert the string to a list\n    string_list = list(string)\n    # Initialize vowel count to 0\n    vowel_count = 0\n    # Loop through each character in the string\n    for char in string_list:\n        # Check if it is a vowel\n        if char in vowel:",
        "detail": "100dayschellenge.projects.all_vowel_containing",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "100dayschellenge.projects.all_vowel_containing",
        "description": "100dayschellenge.projects.all_vowel_containing",
        "peekOfCode": "input_string = input(\"Enter the string: \")\n# Call vowel_count function on input string\nvowel_count(input_string)",
        "detail": "100dayschellenge.projects.all_vowel_containing",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.area of triangle",
        "description": "100dayschellenge.projects.area of triangle",
        "peekOfCode": "a = int(input(\"enter the lenghth of a :- \", ))\nb = int(input(\"enter the lenghth of b :- \", ))\nc = int(input(\"enter the lenghth of c :- \", ))",
        "detail": "100dayschellenge.projects.area of triangle",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.area of triangle",
        "description": "100dayschellenge.projects.area of triangle",
        "peekOfCode": "b = int(input(\"enter the lenghth of b :- \", ))\nc = int(input(\"enter the lenghth of c :- \", ))",
        "detail": "100dayschellenge.projects.area of triangle",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.area of triangle",
        "description": "100dayschellenge.projects.area of triangle",
        "peekOfCode": "c = int(input(\"enter the lenghth of c :- \", ))",
        "detail": "100dayschellenge.projects.area of triangle",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.arrangenumletter",
        "description": "100dayschellenge.projects.arrangenumletter",
        "peekOfCode": "a = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n     \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \n     \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\nb = input(\"enter the word to arrange\")",
        "detail": "100dayschellenge.projects.arrangenumletter",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.arrangenumletter",
        "description": "100dayschellenge.projects.arrangenumletter",
        "peekOfCode": "b = input(\"enter the word to arrange\")",
        "detail": "100dayschellenge.projects.arrangenumletter",
        "documentation": {}
    },
    {
        "label": "lib_book",
        "kind": 6,
        "importPath": "100dayschellenge.projects.book_lib",
        "description": "100dayschellenge.projects.book_lib",
        "peekOfCode": "class lib_book():\n    def __init__(self):\n        self.no_book = 0\n        self.books = []  \n    def addbook(self, book):\n        self.no_book += 1\n        self.books.append(book)\n    def show(self):\n        print(f\"no of books is {self.no_book}\")\n        for book in self.books:",
        "detail": "100dayschellenge.projects.book_lib",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.book_lib",
        "description": "100dayschellenge.projects.book_lib",
        "peekOfCode": "a = lib_book()\na.addbook(\"harry potterh\")\na.addbook(\"harry potterujg\")\na.addbook(\"harry potterwrg\")\na.addbook(\"harry potterq34t\")\na.addbook(\"harry pottertrhny\")\na.addbook(\"harry potterqrtg\")\na.show()",
        "detail": "100dayschellenge.projects.book_lib",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.camerestring",
        "description": "100dayschellenge.projects.camerestring",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = input(\"Enter the number: \")\no = \"\"\nfor i in range(0, len(x) + 1 ):\n    a = x[i:] + x[:i]\n    print(a)\n    if a == y:\n            o = i\nprint(o)",
        "detail": "100dayschellenge.projects.camerestring",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.camerestring",
        "description": "100dayschellenge.projects.camerestring",
        "peekOfCode": "y = input(\"Enter the number: \")\no = \"\"\nfor i in range(0, len(x) + 1 ):\n    a = x[i:] + x[:i]\n    print(a)\n    if a == y:\n            o = i\nprint(o)",
        "detail": "100dayschellenge.projects.camerestring",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "100dayschellenge.projects.camerestring",
        "description": "100dayschellenge.projects.camerestring",
        "peekOfCode": "o = \"\"\nfor i in range(0, len(x) + 1 ):\n    a = x[i:] + x[:i]\n    print(a)\n    if a == y:\n            o = i\nprint(o)",
        "detail": "100dayschellenge.projects.camerestring",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.charchar",
        "description": "100dayschellenge.projects.charchar",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = list(x)\nu = input(\"Enter the string: \")\na = \"\"\nfor i in y:\n    if i in u:\n       print(x, \"It is not appceptable\")\n       break\n    else :\n        a = a + i",
        "detail": "100dayschellenge.projects.charchar",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.charchar",
        "description": "100dayschellenge.projects.charchar",
        "peekOfCode": "y = list(x)\nu = input(\"Enter the string: \")\na = \"\"\nfor i in y:\n    if i in u:\n       print(x, \"It is not appceptable\")\n       break\n    else :\n        a = a + i",
        "detail": "100dayschellenge.projects.charchar",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "100dayschellenge.projects.charchar",
        "description": "100dayschellenge.projects.charchar",
        "peekOfCode": "u = input(\"Enter the string: \")\na = \"\"\nfor i in y:\n    if i in u:\n       print(x, \"It is not appceptable\")\n       break\n    else :\n        a = a + i",
        "detail": "100dayschellenge.projects.charchar",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.charchar",
        "description": "100dayschellenge.projects.charchar",
        "peekOfCode": "a = \"\"\nfor i in y:\n    if i in u:\n       print(x, \"It is not appceptable\")\n       break\n    else :\n        a = a + i",
        "detail": "100dayschellenge.projects.charchar",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.find_number_of_repetation",
        "description": "100dayschellenge.projects.find_number_of_repetation",
        "peekOfCode": "x = str(input(\"enter the paragraph :- \",))\nb = x.title()\nx = str(input(\"enter the word :- \",))\nprint(b.count(x))\n#print(b.count(x)) mean count the number of x in the string",
        "detail": "100dayschellenge.projects.find_number_of_repetation",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.find_number_of_repetation",
        "description": "100dayschellenge.projects.find_number_of_repetation",
        "peekOfCode": "b = x.title()\nx = str(input(\"enter the word :- \",))\nprint(b.count(x))\n#print(b.count(x)) mean count the number of x in the string",
        "detail": "100dayschellenge.projects.find_number_of_repetation",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.find_number_of_repetation",
        "description": "100dayschellenge.projects.find_number_of_repetation",
        "peekOfCode": "x = str(input(\"enter the word :- \",))\nprint(b.count(x))\n#print(b.count(x)) mean count the number of x in the string",
        "detail": "100dayschellenge.projects.find_number_of_repetation",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.find_number_of_word",
        "description": "100dayschellenge.projects.find_number_of_word",
        "peekOfCode": "x = str(input(\"enter the paragraph :- \",))\nb = x.title()\nprint(b.__len__())",
        "detail": "100dayschellenge.projects.find_number_of_word",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.find_number_of_word",
        "description": "100dayschellenge.projects.find_number_of_word",
        "peekOfCode": "b = x.title()\nprint(b.__len__())",
        "detail": "100dayschellenge.projects.find_number_of_word",
        "documentation": {}
    },
    {
        "label": "wordfinf",
        "kind": 2,
        "importPath": "100dayschellenge.projects.finding_word",
        "description": "100dayschellenge.projects.finding_word",
        "peekOfCode": "def wordfinf(a, b):\n    #printing the 1st ocurrence  number of the word of the string which we want to find\n    print(a.find(b))\nmmetrical or Palindromex = input(\"enter the string:- \")\ny = input(\"enter the word:- \")\nwordfinf(x,y)\n\"\"\"\nDescription : THE Program is to count the word in the string.\n\"\"\"\n# making function which takes two values a as a string or a paragraph and b as a word which we want to find how many times it is repeated in the paragraph. ",
        "detail": "100dayschellenge.projects.finding_word",
        "documentation": {}
    },
    {
        "label": "wordcount",
        "kind": 2,
        "importPath": "100dayschellenge.projects.finding_word",
        "description": "100dayschellenge.projects.finding_word",
        "peekOfCode": "def wordcount(a, b):\n    #printing the number of times the word is repeated in the string\n    print(a.count(b))\nm = input(\"enter the parragraph you want :- \")    \nk = input(\"enter the word you want to find:- \")\nwordcount(m,k)",
        "detail": "100dayschellenge.projects.finding_word",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "100dayschellenge.projects.finding_word",
        "description": "100dayschellenge.projects.finding_word",
        "peekOfCode": "__author__ = Mani Gupta\n__email__ = mg99263645@gmail.com\n__status__ = Development\n__version__ = 1.0.0\nDescription: THE Program is to find the word in the string.\n\"\"\"\n# making function which take a and b as a input where a is string or a paragraph and b is word which we us to find the position of the word only for the fist occurence of the word in the string.\ndef wordfinf(a, b):\n    #printing the 1st ocurrence  number of the word of the string which we want to find\n    print(a.find(b))",
        "detail": "100dayschellenge.projects.finding_word",
        "documentation": {}
    },
    {
        "label": "__email__",
        "kind": 5,
        "importPath": "100dayschellenge.projects.finding_word",
        "description": "100dayschellenge.projects.finding_word",
        "peekOfCode": "__email__ = mg99263645@gmail.com\n__status__ = Development\n__version__ = 1.0.0\nDescription: THE Program is to find the word in the string.\n\"\"\"\n# making function which take a and b as a input where a is string or a paragraph and b is word which we us to find the position of the word only for the fist occurence of the word in the string.\ndef wordfinf(a, b):\n    #printing the 1st ocurrence  number of the word of the string which we want to find\n    print(a.find(b))\nmmetrical or Palindromex = input(\"enter the string:- \")",
        "detail": "100dayschellenge.projects.finding_word",
        "documentation": {}
    },
    {
        "label": "__status__",
        "kind": 5,
        "importPath": "100dayschellenge.projects.finding_word",
        "description": "100dayschellenge.projects.finding_word",
        "peekOfCode": "__status__ = Development\n__version__ = 1.0.0\nDescription: THE Program is to find the word in the string.\n\"\"\"\n# making function which take a and b as a input where a is string or a paragraph and b is word which we us to find the position of the word only for the fist occurence of the word in the string.\ndef wordfinf(a, b):\n    #printing the 1st ocurrence  number of the word of the string which we want to find\n    print(a.find(b))\nmmetrical or Palindromex = input(\"enter the string:- \")\ny = input(\"enter the word:- \")",
        "detail": "100dayschellenge.projects.finding_word",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "100dayschellenge.projects.finding_word",
        "description": "100dayschellenge.projects.finding_word",
        "peekOfCode": "__version__ = 1.0.0\nDescription: THE Program is to find the word in the string.\n\"\"\"\n# making function which take a and b as a input where a is string or a paragraph and b is word which we us to find the position of the word only for the fist occurence of the word in the string.\ndef wordfinf(a, b):\n    #printing the 1st ocurrence  number of the word of the string which we want to find\n    print(a.find(b))\nmmetrical or Palindromex = input(\"enter the string:- \")\ny = input(\"enter the word:- \")\nwordfinf(x,y)",
        "detail": "100dayschellenge.projects.finding_word",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.finding_word",
        "description": "100dayschellenge.projects.finding_word",
        "peekOfCode": "y = input(\"enter the word:- \")\nwordfinf(x,y)\n\"\"\"\nDescription : THE Program is to count the word in the string.\n\"\"\"\n# making function which takes two values a as a string or a paragraph and b as a word which we want to find how many times it is repeated in the paragraph. \ndef wordcount(a, b):\n    #printing the number of times the word is repeated in the string\n    print(a.count(b))\nm = input(\"enter the parragraph you want :- \")    ",
        "detail": "100dayschellenge.projects.finding_word",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.projects.finding_word",
        "description": "100dayschellenge.projects.finding_word",
        "peekOfCode": "m = input(\"enter the parragraph you want :- \")    \nk = input(\"enter the word you want to find:- \")\nwordcount(m,k)",
        "detail": "100dayschellenge.projects.finding_word",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.finding_word",
        "description": "100dayschellenge.projects.finding_word",
        "peekOfCode": "k = input(\"enter the word you want to find:- \")\nwordcount(m,k)",
        "detail": "100dayschellenge.projects.finding_word",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.findstring",
        "description": "100dayschellenge.projects.findstring",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = input(\"Enter the string: \")\nz = x.find(y)\nif z >= 0:\n    print(\"The string is found\")",
        "detail": "100dayschellenge.projects.findstring",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.findstring",
        "description": "100dayschellenge.projects.findstring",
        "peekOfCode": "y = input(\"Enter the string: \")\nz = x.find(y)\nif z >= 0:\n    print(\"The string is found\")",
        "detail": "100dayschellenge.projects.findstring",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.findstring",
        "description": "100dayschellenge.projects.findstring",
        "peekOfCode": "z = x.find(y)\nif z >= 0:\n    print(\"The string is found\")",
        "detail": "100dayschellenge.projects.findstring",
        "documentation": {}
    },
    {
        "label": "half_string",
        "kind": 2,
        "importPath": "100dayschellenge.projects.half_string",
        "description": "100dayschellenge.projects.half_string",
        "peekOfCode": "def half_string(str):\n    pass",
        "detail": "100dayschellenge.projects.half_string",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.half_string",
        "description": "100dayschellenge.projects.half_string",
        "peekOfCode": "a = input(\"Enter a string: \")\nk = a.split(\" \")\ne = \"\"\nfor i in k:\n    b = len(i)//2\n    s = i[:b + 1].upper() + i[b:]\n    print(s)\n    e = e + \" \" + s\nprint(e.lstrip())    \ndef half_string(str):",
        "detail": "100dayschellenge.projects.half_string",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.half_string",
        "description": "100dayschellenge.projects.half_string",
        "peekOfCode": "k = a.split(\" \")\ne = \"\"\nfor i in k:\n    b = len(i)//2\n    s = i[:b + 1].upper() + i[b:]\n    print(s)\n    e = e + \" \" + s\nprint(e.lstrip())    \ndef half_string(str):\n    pass",
        "detail": "100dayschellenge.projects.half_string",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "100dayschellenge.projects.half_string",
        "description": "100dayschellenge.projects.half_string",
        "peekOfCode": "e = \"\"\nfor i in k:\n    b = len(i)//2\n    s = i[:b + 1].upper() + i[b:]\n    print(s)\n    e = e + \" \" + s\nprint(e.lstrip())    \ndef half_string(str):\n    pass",
        "detail": "100dayschellenge.projects.half_string",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.isdig",
        "description": "100dayschellenge.projects.isdig",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = list(x)\nw = 0\nfor i in x:\n    z = i.isdigit()\n    if z == True:\n        w = w + 1\nprint(w)",
        "detail": "100dayschellenge.projects.isdig",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.isdig",
        "description": "100dayschellenge.projects.isdig",
        "peekOfCode": "y = list(x)\nw = 0\nfor i in x:\n    z = i.isdigit()\n    if z == True:\n        w = w + 1\nprint(w)",
        "detail": "100dayschellenge.projects.isdig",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "100dayschellenge.projects.isdig",
        "description": "100dayschellenge.projects.isdig",
        "peekOfCode": "w = 0\nfor i in x:\n    z = i.isdigit()\n    if z == True:\n        w = w + 1\nprint(w)",
        "detail": "100dayschellenge.projects.isdig",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.projects.kbc",
        "description": "100dayschellenge.projects.kbc",
        "peekOfCode": "l = {(\"What is the capital of India?\", (\"Bangkok\", \"Washington DC\", \"Dubai\", \"New Delhi\"),\n      (4)), (\"Who founded the Azad Hind Fauj?\", (\"Netaji\", \"Gandhiji\", \"Pandayji\", \"Arbindo\"), (1)),\n     (\"What is the national animal of India?\", (\"Tiger\", \"Lion\", \"Elephant\", \"Peacock\"),\n      (1)), (\"Who is the prime minister of India?\", (\"Narendra Modi\", \"Rahul Gandhi\", \"Arvind Kejriwal\", \"Manmohan Singh\"),\n             (1)),\n     (\"Which is the largest state in India?\", (\"Rajasthan\", \"Madhya Pradesh\", \"Uttar Pradesh\", \"Maharashtra\"),\n      (3)),\n     (\"Which is the largest desert in India?\", (\"Thar Desert\", \"Rann of Kutch\", \"Ladakh\", \"Sundarbans\"),\n      (1))}\nc = 0",
        "detail": "100dayschellenge.projects.kbc",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.kbc",
        "description": "100dayschellenge.projects.kbc",
        "peekOfCode": "c = 0\nfor i in l:\n    print(i[0])\n    a = 1\n    for j in i[1]:\n        print(a, j)\n        a = a + 1\n    b = int(input(\"chosse the options.\"))\n    n = 1\n    if b == i[2]:",
        "detail": "100dayschellenge.projects.kbc",
        "documentation": {}
    },
    {
        "label": "firstlast",
        "kind": 2,
        "importPath": "100dayschellenge.projects.last_and_fist_letter_find",
        "description": "100dayschellenge.projects.last_and_fist_letter_find",
        "peekOfCode": "def firstlast(a):\n        s = a.split(\" \")\n        k = \"\"\n        print(s)\n        for i in s:\n            first = i[0].upper()\n            b = i[0].upper() + i[1:-1] + i[-1].upper()\n            k = k + \" \" + b\n            if k == \" \" :\n                k = \"\"",
        "detail": "100dayschellenge.projects.last_and_fist_letter_find",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.last_and_fist_letter_find",
        "description": "100dayschellenge.projects.last_and_fist_letter_find",
        "peekOfCode": "a = input(\"enter the parta\")\ndef firstlast(a):\n        s = a.split(\" \")\n        k = \"\"\n        print(s)\n        for i in s:\n            first = i[0].upper()\n            b = i[0].upper() + i[1:-1] + i[-1].upper()\n            k = k + \" \" + b\n            if k == \" \" :",
        "detail": "100dayschellenge.projects.last_and_fist_letter_find",
        "documentation": {}
    },
    {
        "label": "'''x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "'''x = input(\"Enter the string\")\nz = list(x)\nm = []\nfor i in z:\n    k = z.count(i)\n    #print(k)\n    e = [(i, k)]\n    m.extend(e)\n    #print(i)\n#print(m)",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "z = list(x)\nm = []\nfor i in z:\n    k = z.count(i)\n    #print(k)\n    e = [(i, k)]\n    m.extend(e)\n    #print(i)\n#print(m)\ng = []",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "m = []\nfor i in z:\n    k = z.count(i)\n    #print(k)\n    e = [(i, k)]\n    m.extend(e)\n    #print(i)\n#print(m)\ng = []\nfor i in m:",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "g = []\nfor i in m:\n    if i not in g:\n        g.append(i)\nc = 0\nq = \"\"\nprint(g)\n'''\nfor i in g:\n    #print(i)",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "c = 0\nq = \"\"\nprint(g)\n'''\nfor i in g:\n    #print(i)\n    lrtf = i[1]\n    if lrtf <= len(x):\n        c = i[1]\n        q = i[0]",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "q = \"\"\nprint(g)\n'''\nfor i in g:\n    #print(i)\n    lrtf = i[1]\n    if lrtf <= len(x):\n        c = i[1]\n        q = i[0]\nprint(q)",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "x = input(\"Enter the string: \")\n# Count occurrences of each character in the input string\nchar_count = {}\nfor char in x:\n    char_count[char] = char_count.get(char, 0) + 1\n# Find the minimum count\nmin_count = min(char_count.values())\n# Find all characters with the minimum count\nmin_chars = [char for char, count in char_count.items() if count == min_count]\nif min_chars:",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "char_count",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "char_count = {}\nfor char in x:\n    char_count[char] = char_count.get(char, 0) + 1\n# Find the minimum count\nmin_count = min(char_count.values())\n# Find all characters with the minimum count\nmin_chars = [char for char, count in char_count.items() if count == min_count]\nif min_chars:\n    print(f\"The character(s) with the minimum occurrence ({min_count} times) in the input string are: {', '.join(min_chars)}\")\nelse:",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "min_count",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "min_count = min(char_count.values())\n# Find all characters with the minimum count\nmin_chars = [char for char, count in char_count.items() if count == min_count]\nif min_chars:\n    print(f\"The character(s) with the minimum occurrence ({min_count} times) in the input string are: {', '.join(min_chars)}\")\nelse:\n    print(\"No characters found in the input string.\")",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "min_chars",
        "kind": 5,
        "importPath": "100dayschellenge.projects.leastnumber",
        "description": "100dayschellenge.projects.leastnumber",
        "peekOfCode": "min_chars = [char for char, count in char_count.items() if count == min_count]\nif min_chars:\n    print(f\"The character(s) with the minimum occurrence ({min_count} times) in the input string are: {', '.join(min_chars)}\")\nelse:\n    print(\"No characters found in the input string.\")",
        "detail": "100dayschellenge.projects.leastnumber",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.mirrorstring",
        "description": "100dayschellenge.projects.mirrorstring",
        "peekOfCode": "x = input(\"Enter a string: \")\nprint(x[::-1])\ny = \"\"\nfor i in x:\n    o = i\n    match o:\n        case 'b':\n            y = y + 'd'\n            continue\n        case 'd':",
        "detail": "100dayschellenge.projects.mirrorstring",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.mirrorstring",
        "description": "100dayschellenge.projects.mirrorstring",
        "peekOfCode": "y = \"\"\nfor i in x:\n    o = i\n    match o:\n        case 'b':\n            y = y + 'd'\n            continue\n        case 'd':\n            y = y + 'b'\n            continue",
        "detail": "100dayschellenge.projects.mirrorstring",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.numberojfspecific",
        "description": "100dayschellenge.projects.numberojfspecific",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = input(\"Enter the string: \")\nz = list(x)\nw = list(y)\nv = []\nu = []\nfor i in z:\n    k = z.count(i)\n    l = [(i, k)]\n    v.extend(l)",
        "detail": "100dayschellenge.projects.numberojfspecific",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.numberojfspecific",
        "description": "100dayschellenge.projects.numberojfspecific",
        "peekOfCode": "y = input(\"Enter the string: \")\nz = list(x)\nw = list(y)\nv = []\nu = []\nfor i in z:\n    k = z.count(i)\n    l = [(i, k)]\n    v.extend(l)\nfor i in v:",
        "detail": "100dayschellenge.projects.numberojfspecific",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.numberojfspecific",
        "description": "100dayschellenge.projects.numberojfspecific",
        "peekOfCode": "z = list(x)\nw = list(y)\nv = []\nu = []\nfor i in z:\n    k = z.count(i)\n    l = [(i, k)]\n    v.extend(l)\nfor i in v:\n    for a in w:",
        "detail": "100dayschellenge.projects.numberojfspecific",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "100dayschellenge.projects.numberojfspecific",
        "description": "100dayschellenge.projects.numberojfspecific",
        "peekOfCode": "w = list(y)\nv = []\nu = []\nfor i in z:\n    k = z.count(i)\n    l = [(i, k)]\n    v.extend(l)\nfor i in v:\n    for a in w:\n        if i[0] == a :",
        "detail": "100dayschellenge.projects.numberojfspecific",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "100dayschellenge.projects.numberojfspecific",
        "description": "100dayschellenge.projects.numberojfspecific",
        "peekOfCode": "v = []\nu = []\nfor i in z:\n    k = z.count(i)\n    l = [(i, k)]\n    v.extend(l)\nfor i in v:\n    for a in w:\n        if i[0] == a :\n            #print(i)",
        "detail": "100dayschellenge.projects.numberojfspecific",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "100dayschellenge.projects.numberojfspecific",
        "description": "100dayschellenge.projects.numberojfspecific",
        "peekOfCode": "u = []\nfor i in z:\n    k = z.count(i)\n    l = [(i, k)]\n    v.extend(l)\nfor i in v:\n    for a in w:\n        if i[0] == a :\n            #print(i)\n            if i not in u:",
        "detail": "100dayschellenge.projects.numberojfspecific",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.odd characters",
        "description": "100dayschellenge.projects.odd characters",
        "peekOfCode": "x = input(\"Enter the string: \")\na = 0\no = []\nfor i in x:\n    e = [(i, x.count(i))]\n    o.extend(e)\nj = \"\"    \nfor i in o:\n    if 0 != i[1] % 2:\n        j = j + i[0]",
        "detail": "100dayschellenge.projects.odd characters",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.odd characters",
        "description": "100dayschellenge.projects.odd characters",
        "peekOfCode": "a = 0\no = []\nfor i in x:\n    e = [(i, x.count(i))]\n    o.extend(e)\nj = \"\"    \nfor i in o:\n    if 0 != i[1] % 2:\n        j = j + i[0]\nprint(j)",
        "detail": "100dayschellenge.projects.odd characters",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "100dayschellenge.projects.odd characters",
        "description": "100dayschellenge.projects.odd characters",
        "peekOfCode": "o = []\nfor i in x:\n    e = [(i, x.count(i))]\n    o.extend(e)\nj = \"\"    \nfor i in o:\n    if 0 != i[1] % 2:\n        j = j + i[0]\nprint(j)",
        "detail": "100dayschellenge.projects.odd characters",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "100dayschellenge.projects.odd characters",
        "description": "100dayschellenge.projects.odd characters",
        "peekOfCode": "j = \"\"    \nfor i in o:\n    if 0 != i[1] % 2:\n        j = j + i[0]\nprint(j)",
        "detail": "100dayschellenge.projects.odd characters",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.odd even",
        "description": "100dayschellenge.projects.odd even",
        "peekOfCode": "x = int(input(\"enter the number :- \"))\nif x % 2 == 0:\n    print(\"even\")\nelse:\n    print(\"odd\")",
        "detail": "100dayschellenge.projects.odd even",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.paragraph_word",
        "description": "100dayschellenge.projects.paragraph_word",
        "peekOfCode": "x = str(input(\"enter the paragraph :- \",))\nb = x.title()\nprint(b.split())",
        "detail": "100dayschellenge.projects.paragraph_word",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.paragraph_word",
        "description": "100dayschellenge.projects.paragraph_word",
        "peekOfCode": "b = x.title()\nprint(b.split())",
        "detail": "100dayschellenge.projects.paragraph_word",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.primefactor",
        "description": "100dayschellenge.projects.primefactor",
        "peekOfCode": "x = int(input(\"enter the number :- \"))\n\"\"\"Prints out all prime factors of a given integer.\nIterates through all numbers from 1 to the input number. Checks if the \ncurrent number divides the input number without remainder, indicating it is\na factor. Further checks if the current factor is prime by trying to divide \nit by all numbers from 2 to itself. If no division is without remainder, \nthe current factor is prime. \nThe prime factors are printed as they are found. After printing a factor,\nthe input number is divided by that factor to reduce it for further \nfactorization.",
        "detail": "100dayschellenge.projects.primefactor",
        "documentation": {}
    },
    {
        "label": "onlyeven",
        "kind": 2,
        "importPath": "100dayschellenge.projects.print_all_even_word",
        "description": "100dayschellenge.projects.print_all_even_word",
        "peekOfCode": "def onlyeven(a):\n    s = a.split(\" \")\n    for i in s:\n        if len(i)%2 == 0:\n            print(i)\nx = input(\"enter the parra  \")  \nonlyeven(x)",
        "detail": "100dayschellenge.projects.print_all_even_word",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.print_all_even_word",
        "description": "100dayschellenge.projects.print_all_even_word",
        "peekOfCode": "x = input(\"enter the parra  \")  \nonlyeven(x)",
        "detail": "100dayschellenge.projects.print_all_even_word",
        "documentation": {}
    },
    {
        "label": "similar_string_find",
        "kind": 2,
        "importPath": "100dayschellenge.projects.python program to check whether the string is Symmetrical or Palindrome",
        "description": "100dayschellenge.projects.python program to check whether the string is Symmetrical or Palindrome",
        "peekOfCode": "def similar_string_find(a):\n    if a[::-1] == a:\n        print(\"yes it is palidrome\")\n    else:\n        print(\"its not a palidrome\")  \nx = input(\"enter name\") \nsimilar_string_find(x)",
        "detail": "100dayschellenge.projects.python program to check whether the string is Symmetrical or Palindrome",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.python program to check whether the string is Symmetrical or Palindrome",
        "description": "100dayschellenge.projects.python program to check whether the string is Symmetrical or Palindrome",
        "peekOfCode": "x = input(\"enter name\") \nsimilar_string_find(x)",
        "detail": "100dayschellenge.projects.python program to check whether the string is Symmetrical or Palindrome",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.remove_duplicat",
        "description": "100dayschellenge.projects.remove_duplicat",
        "peekOfCode": "a = input(\"enter the string\")\nb = list(a)\nx = \"\"\nfor i in b:\n    if i not in x:\n        x = x + i\nprint(x)",
        "detail": "100dayschellenge.projects.remove_duplicat",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.remove_duplicat",
        "description": "100dayschellenge.projects.remove_duplicat",
        "peekOfCode": "b = list(a)\nx = \"\"\nfor i in b:\n    if i not in x:\n        x = x + i\nprint(x)",
        "detail": "100dayschellenge.projects.remove_duplicat",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.remove_duplicat",
        "description": "100dayschellenge.projects.remove_duplicat",
        "peekOfCode": "x = \"\"\nfor i in b:\n    if i not in x:\n        x = x + i\nprint(x)",
        "detail": "100dayschellenge.projects.remove_duplicat",
        "documentation": {}
    },
    {
        "label": "input_path",
        "kind": 5,
        "importPath": "100dayschellenge.projects.removebg",
        "description": "100dayschellenge.projects.removebg",
        "peekOfCode": "input_path = '/home/mani/Desktop/mani-demo-new-1/100dayschellenge/wp5457083-780130089.jpg'\noutput_path = '/home/mani/Desktop/mani-demo-new-1/100dayschellenge/wp5457083-780130089.png'\ninp = Image.open(input_path)\noutput = remove(inp)\noutput.save(output_path)",
        "detail": "100dayschellenge.projects.removebg",
        "documentation": {}
    },
    {
        "label": "output_path",
        "kind": 5,
        "importPath": "100dayschellenge.projects.removebg",
        "description": "100dayschellenge.projects.removebg",
        "peekOfCode": "output_path = '/home/mani/Desktop/mani-demo-new-1/100dayschellenge/wp5457083-780130089.png'\ninp = Image.open(input_path)\noutput = remove(inp)\noutput.save(output_path)",
        "detail": "100dayschellenge.projects.removebg",
        "documentation": {}
    },
    {
        "label": "inp",
        "kind": 5,
        "importPath": "100dayschellenge.projects.removebg",
        "description": "100dayschellenge.projects.removebg",
        "peekOfCode": "inp = Image.open(input_path)\noutput = remove(inp)\noutput.save(output_path)",
        "detail": "100dayschellenge.projects.removebg",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "100dayschellenge.projects.removebg",
        "description": "100dayschellenge.projects.removebg",
        "peekOfCode": "output = remove(inp)\noutput.save(output_path)",
        "detail": "100dayschellenge.projects.removebg",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.removeith",
        "description": "100dayschellenge.projects.removeith",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = list(x)\na = 0\nk = \"\"\nn = int(input(\"Enter the number: \"))\nfor i in y:\n    if a == n :\n        #print(i)\n        pass\n    else :",
        "detail": "100dayschellenge.projects.removeith",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.removeith",
        "description": "100dayschellenge.projects.removeith",
        "peekOfCode": "y = list(x)\na = 0\nk = \"\"\nn = int(input(\"Enter the number: \"))\nfor i in y:\n    if a == n :\n        #print(i)\n        pass\n    else :\n        k = k + i  ",
        "detail": "100dayschellenge.projects.removeith",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.removeith",
        "description": "100dayschellenge.projects.removeith",
        "peekOfCode": "a = 0\nk = \"\"\nn = int(input(\"Enter the number: \"))\nfor i in y:\n    if a == n :\n        #print(i)\n        pass\n    else :\n        k = k + i  \n    a = a + 1",
        "detail": "100dayschellenge.projects.removeith",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.removeith",
        "description": "100dayschellenge.projects.removeith",
        "peekOfCode": "k = \"\"\nn = int(input(\"Enter the number: \"))\nfor i in y:\n    if a == n :\n        #print(i)\n        pass\n    else :\n        k = k + i  \n    a = a + 1\nprint(k)",
        "detail": "100dayschellenge.projects.removeith",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.projects.removeith",
        "description": "100dayschellenge.projects.removeith",
        "peekOfCode": "n = int(input(\"Enter the number: \"))\nfor i in y:\n    if a == n :\n        #print(i)\n        pass\n    else :\n        k = k + i  \n    a = a + 1\nprint(k)",
        "detail": "100dayschellenge.projects.removeith",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "100dayschellenge.projects.reverce 10 dig",
        "description": "100dayschellenge.projects.reverce 10 dig",
        "peekOfCode": "num = int(input(\"enter the numbe\"))\nb = str(num)\nprint(b)\nc = 0\nd = \"\"\nfor i in b:\n    e = len(b) - c - 1\n    d = d + b[e]\n    c += 1\nprint(d)",
        "detail": "100dayschellenge.projects.reverce 10 dig",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.reverce 10 dig",
        "description": "100dayschellenge.projects.reverce 10 dig",
        "peekOfCode": "b = str(num)\nprint(b)\nc = 0\nd = \"\"\nfor i in b:\n    e = len(b) - c - 1\n    d = d + b[e]\n    c += 1\nprint(d)",
        "detail": "100dayschellenge.projects.reverce 10 dig",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.reverce 10 dig",
        "description": "100dayschellenge.projects.reverce 10 dig",
        "peekOfCode": "c = 0\nd = \"\"\nfor i in b:\n    e = len(b) - c - 1\n    d = d + b[e]\n    c += 1\nprint(d)",
        "detail": "100dayschellenge.projects.reverce 10 dig",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.projects.reverce 10 dig",
        "description": "100dayschellenge.projects.reverce 10 dig",
        "peekOfCode": "d = \"\"\nfor i in b:\n    e = len(b) - c - 1\n    d = d + b[e]\n    c += 1\nprint(d)",
        "detail": "100dayschellenge.projects.reverce 10 dig",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.projects.revers the string",
        "description": "100dayschellenge.projects.revers the string",
        "peekOfCode": "d = input(\"enter the string\")\na = sorted(d)\nb = len(a)\nc = \"\"\nfor i in a:\n    b = b - 1\n    c = c + a[b]\nprint(c)",
        "detail": "100dayschellenge.projects.revers the string",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.revers the string",
        "description": "100dayschellenge.projects.revers the string",
        "peekOfCode": "a = sorted(d)\nb = len(a)\nc = \"\"\nfor i in a:\n    b = b - 1\n    c = c + a[b]\nprint(c)",
        "detail": "100dayschellenge.projects.revers the string",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.revers the string",
        "description": "100dayschellenge.projects.revers the string",
        "peekOfCode": "b = len(a)\nc = \"\"\nfor i in a:\n    b = b - 1\n    c = c + a[b]\nprint(c)",
        "detail": "100dayschellenge.projects.revers the string",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.revers the string",
        "description": "100dayschellenge.projects.revers the string",
        "peekOfCode": "c = \"\"\nfor i in a:\n    b = b - 1\n    c = c + a[b]\nprint(c)",
        "detail": "100dayschellenge.projects.revers the string",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "a = input(\"enter the message\")\no = len(a)\nprint(a)\nb = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n     \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \n     \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n     \",\", \".\", \"?\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\",\"0\", \"1\",\n     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"/\", \" \", \"-\", \"_\", \"+\",\n     \"=\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \":\", \";\", \"'\", \"\\\"\", \"<\", \">\",",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "o = len(a)\nprint(a)\nb = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n     \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \n     \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n     \",\", \".\", \"?\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\",\"0\", \"1\",\n     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"/\", \" \", \"-\", \"_\", \"+\",\n     \"=\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \":\", \";\", \"'\", \"\\\"\", \"<\", \">\",\n     \"|\", \"~\", \"`\",]",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "b = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n     \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \n     \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n     \",\", \".\", \"?\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\",\"0\", \"1\",\n     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"/\", \" \", \"-\", \"_\", \"+\",\n     \"=\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \":\", \";\", \"'\", \"\\\"\", \"<\", \">\",\n     \"|\", \"~\", \"`\",]\nd = \"\"\nc = len(a)",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "d = \"\"\nc = len(a)\nprint(c)\ne = len(b)\ng = 0\nprint(e)\nfor f in range(0, c):\n    if c > e:\n        c = c - e\n        #print(\"elsewala 1st\", c)",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "c = len(a)\nprint(c)\ne = len(b)\ng = 0\nprint(e)\nfor f in range(0, c):\n    if c > e:\n        c = c - e\n        #print(\"elsewala 1st\", c)\n    else:",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "e = len(b)\ng = 0\nprint(e)\nfor f in range(0, c):\n    if c > e:\n        c = c - e\n        #print(\"elsewala 1st\", c)\n    else:\n        break\nprint(c)",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "g = 0\nprint(e)\nfor f in range(0, c):\n    if c > e:\n        c = c - e\n        #print(\"elsewala 1st\", c)\n    else:\n        break\nprint(c)\nf = 0",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "f = 0\nlist1 = []\nlist2 = []\nfor i in a:\n    #print(i)\n    f = 0\n    for j in b:\n        if i == j:\n           #print(i, \"2\")\n            list1.append(f + c)",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "list1 = []\nlist2 = []\nfor i in a:\n    #print(i)\n    f = 0\n    for j in b:\n        if i == j:\n           #print(i, \"2\")\n            list1.append(f + c)\n            list2.append(f)",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "list2 = []\nfor i in a:\n    #print(i)\n    f = 0\n    for j in b:\n        if i == j:\n           #print(i, \"2\")\n            list1.append(f + c)\n            list2.append(f)\n        f = f + 1",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "k = []\nfor i in list1:\n    l = 0 \n    if int(i) > e:\n        l = int(i) - e\n        k.append(l)\n        #print(\"elsewala 1st\", c)\n    else:\n        k.append(i)\nelse:",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "g = \"\"\nfor i in k :\n    h = 0\n    for j in b:\n        if i == h:\n            #print(j)\n            g = g + j\n        h = h + 1\nprint(g)\nprint(len(g))",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretcodelangugesend",
        "description": "100dayschellenge.projects.secretcodelangugesend",
        "peekOfCode": "m = str(g) + \"_____\" + str(o)\nprint(m)\n# The variables a and v are not the same because:\n# - a is the original input string \n# - v is the decoded output string after encrypting and decrypting a\n# So v should match the original a, but they are not exactly the same variable.",
        "detail": "100dayschellenge.projects.secretcodelangugesend",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "m = input(\"enter the code\")\nb = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n     \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \n     \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n     \",\", \".\", \"?\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\",\"0\", \"1\",\n     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"/\", \" \", \"-\", \"_\", \"+\",\n     \"=\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \":\", \";\", \"'\", \"\\\"\", \"<\", \">\",\n     \"|\", \"~\", \"`\",]\nd = \"\"",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "b = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n     \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \n     \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n     \",\", \".\", \"?\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\",\"0\", \"1\",\n     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"/\", \" \", \"-\", \"_\", \"+\",\n     \"=\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \":\", \";\", \"'\", \"\\\"\", \"<\", \">\",\n     \"|\", \"~\", \"`\",]\nd = \"\"\ne = len(b)",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "d = \"\"\ne = len(b)\nn = m.split(\"_____\")\nt = n[0]\np = int(n[1])\nprint(t)\nprint(p)\nfor f in range(0, p):\n    if p > e:\n        p = p - e",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "e = len(b)\nn = m.split(\"_____\")\nt = n[0]\np = int(n[1])\nprint(t)\nprint(p)\nfor f in range(0, p):\n    if p > e:\n        p = p - e\n        #print(\"elsewala 1st\", c)",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "n = m.split(\"_____\")\nt = n[0]\np = int(n[1])\nprint(t)\nprint(p)\nfor f in range(0, p):\n    if p > e:\n        p = p - e\n        #print(\"elsewala 1st\", c)\n    else:",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "t = n[0]\np = int(n[1])\nprint(t)\nprint(p)\nfor f in range(0, p):\n    if p > e:\n        p = p - e\n        #print(\"elsewala 1st\", c)\n    else:\n        break",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "p = int(n[1])\nprint(t)\nprint(p)\nfor f in range(0, p):\n    if p > e:\n        p = p - e\n        #print(\"elsewala 1st\", c)\n    else:\n        break\n#print(c)",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "q = int(e) - int(p)\nprint(q)\ns = []\nfor i in t:\n    r = 0\n    for j in b:\n        if i == j:\n            s.append(r + q) \n        r = r + 1\nu = [] ",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "s = []\nfor i in t:\n    r = 0\n    for j in b:\n        if i == j:\n            s.append(r + q) \n        r = r + 1\nu = [] \nfor i in s:\n    if int(i) > e - 1:",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "u = [] \nfor i in s:\n    if int(i) > e - 1:\n        x = int(i) - e\n        u.append(x)\n    else:\n        u.append(i)\nprint(u)\nprint(len(u))\nv = \"\"  ",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "100dayschellenge.projects.secretlangugedecoder",
        "description": "100dayschellenge.projects.secretlangugedecoder",
        "peekOfCode": "v = \"\"  \nfor i in u:\n    w = 0\n    for j in b:\n        if i == w:\n            v = v + b[w]\n        w = w + 1\nprint(v)",
        "detail": "100dayschellenge.projects.secretlangugedecoder",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.projects.snake_water-gun",
        "description": "100dayschellenge.projects.snake_water-gun",
        "peekOfCode": "l = {\"Snake\", \"Water\", \"Gun\"}\nx = l.pop()\nwhile True :\n    print('''\n          Enter The Value. \n            1 For Snake\n            2 For Water\n            3 for Gun\n       ''')\n    user = int(input(\"Enter the value\"))",
        "detail": "100dayschellenge.projects.snake_water-gun",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.snake_water-gun",
        "description": "100dayschellenge.projects.snake_water-gun",
        "peekOfCode": "x = l.pop()\nwhile True :\n    print('''\n          Enter The Value. \n            1 For Snake\n            2 For Water\n            3 for Gun\n       ''')\n    user = int(input(\"Enter the value\"))\n    match x:    ",
        "detail": "100dayschellenge.projects.snake_water-gun",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.string-formatting",
        "description": "100dayschellenge.projects.string-formatting",
        "peekOfCode": "y = (input(\"enter the number :- \"))\nx = int(y)\n# Convert integer to binary and get length\nbinary1 = bin(x)[2:]\nwidth = len(binary1)\n# Loop through numbers 1 to x\nfor i in range(1, x + 1):\n    # Convert each number to hexadecimal, octal, binary and decimal\n    hexadecimal = str(hex(i)[2:])\n    octal = str(oct(i)[2:])",
        "detail": "100dayschellenge.projects.string-formatting",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.string-formatting",
        "description": "100dayschellenge.projects.string-formatting",
        "peekOfCode": "x = int(y)\n# Convert integer to binary and get length\nbinary1 = bin(x)[2:]\nwidth = len(binary1)\n# Loop through numbers 1 to x\nfor i in range(1, x + 1):\n    # Convert each number to hexadecimal, octal, binary and decimal\n    hexadecimal = str(hex(i)[2:])\n    octal = str(oct(i)[2:])\n    binary = str(bin(i)[2:])",
        "detail": "100dayschellenge.projects.string-formatting",
        "documentation": {}
    },
    {
        "label": "binary1",
        "kind": 5,
        "importPath": "100dayschellenge.projects.string-formatting",
        "description": "100dayschellenge.projects.string-formatting",
        "peekOfCode": "binary1 = bin(x)[2:]\nwidth = len(binary1)\n# Loop through numbers 1 to x\nfor i in range(1, x + 1):\n    # Convert each number to hexadecimal, octal, binary and decimal\n    hexadecimal = str(hex(i)[2:])\n    octal = str(oct(i)[2:])\n    binary = str(bin(i)[2:])\n    decimal = str(i)\n    # Print each base conversion right justified to width of binary",
        "detail": "100dayschellenge.projects.string-formatting",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "100dayschellenge.projects.string-formatting",
        "description": "100dayschellenge.projects.string-formatting",
        "peekOfCode": "width = len(binary1)\n# Loop through numbers 1 to x\nfor i in range(1, x + 1):\n    # Convert each number to hexadecimal, octal, binary and decimal\n    hexadecimal = str(hex(i)[2:])\n    octal = str(oct(i)[2:])\n    binary = str(bin(i)[2:])\n    decimal = str(i)\n    # Print each base conversion right justified to width of binary\n    print(hexadecimal.rjust(width), octal.rjust(width),",
        "detail": "100dayschellenge.projects.string-formatting",
        "documentation": {}
    },
    {
        "label": "stringfo",
        "kind": 2,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "def stringfo(k, l, m):\n    a = int(input(\"enter the number:- \"))\n    b = int(input(\"enter the number:- \"))\n    c = int(input(\"enter the number:- \"))\n    # zip together the numbers and words and sort\n    words = sorted(zip([a, b, c], [k, l, m]))\n    # join the sorted words together\n    String1 = \" \".join([w[1] for w in words])\n    print(\"Print String in default order: \")\n    print(String1)",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "stringfo",
        "kind": 2,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "def stringfo(k, l, m):\n    # Taking input for the positions\n    a = int(input(\"Enter the position of '{}': \".format(k)))\n    b = int(input(\"Enter the position of '{}': \".format(l)))\n    c = int(input(\"Enter the position of '{}': \".format(m)))\n    # Using the input positions to format the string\n    # I dont know this syntax of python.\n    # I just googled it.\n    # Printing the formatted string\n    print(\"Print String in user-defined order: \")",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "k = input(\"enter word:- \")\nl = input(\"enter word:- \")\nm = input(\"enter word:- \")\nstringfo( k, l, m)\ndef stringfo(k, l, m):\n    a = int(input(\"enter the number:- \"))\n    b = int(input(\"enter the number:- \"))\n    c = int(input(\"enter the number:- \"))\n    # zip together the numbers and words and sort\n    words = sorted(zip([a, b, c], [k, l, m]))",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "l = input(\"enter word:- \")\nm = input(\"enter word:- \")\nstringfo( k, l, m)\ndef stringfo(k, l, m):\n    a = int(input(\"enter the number:- \"))\n    b = int(input(\"enter the number:- \"))\n    c = int(input(\"enter the number:- \"))\n    # zip together the numbers and words and sort\n    words = sorted(zip([a, b, c], [k, l, m]))\n    # join the sorted words together",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "m = input(\"enter word:- \")\nstringfo( k, l, m)\ndef stringfo(k, l, m):\n    a = int(input(\"enter the number:- \"))\n    b = int(input(\"enter the number:- \"))\n    c = int(input(\"enter the number:- \"))\n    # zip together the numbers and words and sort\n    words = sorted(zip([a, b, c], [k, l, m]))\n    # join the sorted words together\n    String1 = \" \".join([w[1] for w in words])",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "k = input(\"enter word:- \")\nl = input(\"enter word:- \")\nm = input(\"enter word:- \")\nstringfo( k, l, m)\n'''\ndef stringfo(k, l, m):\n    # Taking input for the positions\n    a = int(input(\"Enter the position of '{}': \".format(k)))\n    b = int(input(\"Enter the position of '{}': \".format(l)))\n    c = int(input(\"Enter the position of '{}': \".format(m)))",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "l = input(\"enter word:- \")\nm = input(\"enter word:- \")\nstringfo( k, l, m)\n'''\ndef stringfo(k, l, m):\n    # Taking input for the positions\n    a = int(input(\"Enter the position of '{}': \".format(k)))\n    b = int(input(\"Enter the position of '{}': \".format(l)))\n    c = int(input(\"Enter the position of '{}': \".format(m)))\n    # Using the input positions to format the string",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "m = input(\"enter word:- \")\nstringfo( k, l, m)\n'''\ndef stringfo(k, l, m):\n    # Taking input for the positions\n    a = int(input(\"Enter the position of '{}': \".format(k)))\n    b = int(input(\"Enter the position of '{}': \".format(l)))\n    c = int(input(\"Enter the position of '{}': \".format(m)))\n    # Using the input positions to format the string\n    # I dont know this syntax of python.",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "k = input(\"Enter word for 'a': \")\nl = input(\"Enter word for 'b': \")\nm = input(\"Enter word for 'c': \")\n# Calling the function with input values\nstringfo(k, l, m)",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "l = input(\"Enter word for 'b': \")\nm = input(\"Enter word for 'c': \")\n# Calling the function with input values\nstringfo(k, l, m)",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringformating",
        "description": "100dayschellenge.projects.stringformating",
        "peekOfCode": "m = input(\"Enter word for 'c': \")\n# Calling the function with input values\nstringfo(k, l, m)",
        "detail": "100dayschellenge.projects.stringformating",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringslice_roted",
        "description": "100dayschellenge.projects.stringslice_roted",
        "peekOfCode": "x = input(\"Enter the string: \")\ny = int(input(\"Enter the number: \"))\na = len(x)\nb = 1 + y\nc = x[b:]\nd = x[0:b]\nprint(c + d)",
        "detail": "100dayschellenge.projects.stringslice_roted",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringslice_roted",
        "description": "100dayschellenge.projects.stringslice_roted",
        "peekOfCode": "y = int(input(\"Enter the number: \"))\na = len(x)\nb = 1 + y\nc = x[b:]\nd = x[0:b]\nprint(c + d)",
        "detail": "100dayschellenge.projects.stringslice_roted",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringslice_roted",
        "description": "100dayschellenge.projects.stringslice_roted",
        "peekOfCode": "a = len(x)\nb = 1 + y\nc = x[b:]\nd = x[0:b]\nprint(c + d)",
        "detail": "100dayschellenge.projects.stringslice_roted",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringslice_roted",
        "description": "100dayschellenge.projects.stringslice_roted",
        "peekOfCode": "b = 1 + y\nc = x[b:]\nd = x[0:b]\nprint(c + d)",
        "detail": "100dayschellenge.projects.stringslice_roted",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringslice_roted",
        "description": "100dayschellenge.projects.stringslice_roted",
        "peekOfCode": "c = x[b:]\nd = x[0:b]\nprint(c + d)",
        "detail": "100dayschellenge.projects.stringslice_roted",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.projects.stringslice_roted",
        "description": "100dayschellenge.projects.stringslice_roted",
        "peekOfCode": "d = x[0:b]\nprint(c + d)",
        "detail": "100dayschellenge.projects.stringslice_roted",
        "documentation": {}
    },
    {
        "label": "changei",
        "kind": 2,
        "importPath": "100dayschellenge.projects.strringoctel.hex_etc",
        "description": "100dayschellenge.projects.strringoctel.hex_etc",
        "peekOfCode": "def changei(b, a):\n    match a :\n        case 'octal':\n            converted = oct(b)\n        case 'hex':\n            converted = hex(b)\n        case 'decimal':\n            converted = str(b)  \n        case 'float':\n            converted = float(b)  ",
        "detail": "100dayschellenge.projects.strringoctel.hex_etc",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.strringoctel.hex_etc",
        "description": "100dayschellenge.projects.strringoctel.hex_etc",
        "peekOfCode": "b = float(input(\"Enter the number: \"))\nconversion_format = input(\"Enter the conversion format (octal, hex, binary, decimal, float, string): \")\n# Calling the function with user input values\nchangei(b, conversion_format)",
        "detail": "100dayschellenge.projects.strringoctel.hex_etc",
        "documentation": {}
    },
    {
        "label": "conversion_format",
        "kind": 5,
        "importPath": "100dayschellenge.projects.strringoctel.hex_etc",
        "description": "100dayschellenge.projects.strringoctel.hex_etc",
        "peekOfCode": "conversion_format = input(\"Enter the conversion format (octal, hex, binary, decimal, float, string): \")\n# Calling the function with user input values\nchangei(b, conversion_format)",
        "detail": "100dayschellenge.projects.strringoctel.hex_etc",
        "documentation": {}
    },
    {
        "label": "maniman",
        "kind": 2,
        "importPath": "100dayschellenge.projects.true_false_using_reper",
        "description": "100dayschellenge.projects.true_false_using_reper",
        "peekOfCode": "def maniman(a, b):\n    print(repr(a and b)) \n    # Returns a \n    print(repr(b and a)) \n    # Returns b\t \n    print(repr(a or b)) \n    # Returns b \n    print(repr(b or a))\t \n    a = 'for'\n    # Returns b ",
        "detail": "100dayschellenge.projects.true_false_using_reper",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.projects.true_false_using_reper",
        "description": "100dayschellenge.projects.true_false_using_reper",
        "peekOfCode": "a = input(\"Enter the first number: \")\nb = input(\"Enter the second number: \")\nmaniman(a, b)",
        "detail": "100dayschellenge.projects.true_false_using_reper",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.projects.true_false_using_reper",
        "description": "100dayschellenge.projects.true_false_using_reper",
        "peekOfCode": "b = input(\"Enter the second number: \")\nmaniman(a, b)",
        "detail": "100dayschellenge.projects.true_false_using_reper",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "100dayschellenge.projects.uncommenword",
        "description": "100dayschellenge.projects.uncommenword",
        "peekOfCode": "u = \"\"\nv = input(\"Enter the string\")\nx = input(\"Enter the string: \") \ny = list(x)\nz = list(v)\nfor i in x:\n    for j in v:\n        if j == i:\n            #print(i, \"It is not appceptable\")\n            pass",
        "detail": "100dayschellenge.projects.uncommenword",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "100dayschellenge.projects.uncommenword",
        "description": "100dayschellenge.projects.uncommenword",
        "peekOfCode": "v = input(\"Enter the string\")\nx = input(\"Enter the string: \") \ny = list(x)\nz = list(v)\nfor i in x:\n    for j in v:\n        if j == i:\n            #print(i, \"It is not appceptable\")\n            pass\n        else:",
        "detail": "100dayschellenge.projects.uncommenword",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.projects.uncommenword",
        "description": "100dayschellenge.projects.uncommenword",
        "peekOfCode": "x = input(\"Enter the string: \") \ny = list(x)\nz = list(v)\nfor i in x:\n    for j in v:\n        if j == i:\n            #print(i, \"It is not appceptable\")\n            pass\n        else:\n            u = u + i",
        "detail": "100dayschellenge.projects.uncommenword",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "100dayschellenge.projects.uncommenword",
        "description": "100dayschellenge.projects.uncommenword",
        "peekOfCode": "y = list(x)\nz = list(v)\nfor i in x:\n    for j in v:\n        if j == i:\n            #print(i, \"It is not appceptable\")\n            pass\n        else:\n            u = u + i\nprint(u)",
        "detail": "100dayschellenge.projects.uncommenword",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "100dayschellenge.projects.uncommenword",
        "description": "100dayschellenge.projects.uncommenword",
        "peekOfCode": "z = list(v)\nfor i in x:\n    for j in v:\n        if j == i:\n            #print(i, \"It is not appceptable\")\n            pass\n        else:\n            u = u + i\nprint(u)",
        "detail": "100dayschellenge.projects.uncommenword",
        "documentation": {}
    },
    {
        "label": "employ",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class employ:\n  name = \"mani\"\n  occ = \"SDE1\"\n  salary =  150000\n#by a = employ() we says that all the funtions of the class employ are used by a\n#by a.something we call the variables of the a\na = employ()\nprint(a.name, a.occ, a.salary)\nclass employ:\n  name = \"mani\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "employ",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class employ:\n  name = \"mani\"\n  occ = \"SDE1\"\n  salary =  150000\n  def info(self):\n    print(f\"This is {self.name} there salary is {self.salary} There role is {self.occ} \")\n#above info is funtion which \n#it's just like sabki infoprmation ek formate me store kare sakte hai\n#like a.employ() mean a ke information b.employ() is all information of b\na = employ()",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "man",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class mani :\n  name = \" hsk\"\n  occ = \"SDK@\"\n  salary = \"28883\"\n  print(f\"this is {name} there role is {occ} there pay is {salary}\")\ne = mani()\ne.name = \"kuntramal\"\ne.occ = \"SDF\"\ne.salary = 3289649\n#we have to use new funtion because it only runs one",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class Person:\n  def __init__(self, n, o, s):\n    print('hii')\n    self.name = n\n    self.occ = o\n    self.salary = s\n    #print(f\"This is {self.name} there salary is {self.salary} There role is {self.occ} \")\n  def info(self):\n     print(f\"This is {self.name} there salary is {self.salary} There role is {self.occ} \")\nprint(Person(\"mani\", \"SDE1\", 50000))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class MyClass:\n  def __init__(self, value):\n      self._value = value\n      print(\"this is init\")\n  def show(self):\n    print(f\"Value is {self._value}\")\n    print(\"this is in show\")\n  @property\n  def ten_value(self):\n      print(f\"THIS IS ten_value, {self._value}\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mani12",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class mani12(MyClass):\n  def __init__(self, programing):\n    self._programing = programing\n  def show1(self):\n    print(f\"Value is programing is {self._programing}\")\na = mani12(\"Python\")\na.show1()\na.ten_value = 33\nprint(a.ten_value)\na.show()",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mani325",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class mani325():\n  def __init__(self):\n    self.__programing = \"programing\"\n  def show1(self):\n    print(f\"Value is programing is {self.__programing}\")\nm = mani325()\n#m.__programing = \"C++\"#it doesn't change programing\nm._mani325__programing = \"Python\"#but it change it to Python\nm.show1()\n#static methods",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "static",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class static:\n    @staticmethod\n    def mull(a, b):\n        print(a * b)\nprint(static.mull(15, 25))#by this way also accesable\na = static()#this is also valid way to exise \na.mull(25, 45)\n#instance vs class variable\nclass mania():\n  def __init__(self, prog) :",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mania",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class mania():\n  def __init__(self, prog) :\n     self.programe = prog\n  def add(a, b):\n    print(a + b)\nc = mania(\"python\")\n#c.add(12, 18)# it give error TypeError: mania.__init__() missing 1 required positional argument: 'prog'\n#why because this code is same as mania.add(c)\n#so here clearly c is one variable and we also give two othere so this is the reson\n#let if we just add three variable in funtion",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mania",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class mania():\n  def __init__(self, prog) :\n     self.programe = prog\n  def add(a, b, c):\n    print(c + b)\nc = mania(\"python\")#above we just leave a as a take c\n#we may define it as self so if we make changes in c then it may change by self\nc.add(243, 3487)\n#as we can't use anything from class so no need of self\n#class vs instence variable",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mania",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class mania():\n  company = \"apple\"\n  def __init__(self, prog) :\n     self.programe = prog\n  def add(a, b, c):\n    print(c + b)\n  def show(self):\n    print(f\"her her company is {self.company} and languge is {self.programe}\")\na = mania(\"python\")\na.company = \"amazon\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mania",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class mania():\n    employ = 0\n    def __init__(self, prog):\n        self.programe = prog\n        mania.employ += 1 #this is the syntext\n    def add(self, b, c):\n        print(c + b)\n    def show(self):\n        print(f\"her her company is {self.company} and languge is {self.programe} and number is {mania.employ}\")\na = mania(\"python\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mania",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class mania():\n    company = \"apple\"\n    def __init__(self, prog):\n        self.programe = prog\n    def add(self, b, c):\n        print(c + b)\n    def show(self):\n        print(f\"her her company is {self.company} and languge is {self.programe} and number is {mania.company}\")\n    @classmethod\n    def changecompany(cls, new_company):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mania",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class mania():\n    company = \"apple\"\n    def __init__(self, prog, name, salary):\n        self.programe = prog\n        self.name = name\n        self.salary = salary\n    def add(self, b, c):\n        print(c + b)\n    def show(self):\n        print(f\"her her company is {self.company} and languge is {self.programe} and number is {mania.company} salary is {self.salary}, name is {self.name}\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parenst",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class parenst():\n  def __init__(self, name, salary):\n    self.name = name\n    self.sal = salary\n  def show(self):\n    print(f\"name is {self.name} and salary is {self.sal}\")\nclass son(parenst):\n  def __init__(self, name, salary, lang, exp):\n    super().__init__(name, salary)\n    self.languge = lang",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "son",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class son(parenst):\n  def __init__(self, name, salary, lang, exp):\n    super().__init__(name, salary)\n    self.languge = lang\n    self.exp = exp\n  def show(self):\n    print(f\"name is {self.name} and salary is {self.sal} and experiance is {self.exp} and languge is {self.languge}\")\nm = son(\"mani\", \"100000\", \"python\", \"5 year\")\nm.show()\n#the above code just helpfull for don't repeat the code every time",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parenst",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class parenst():\n  def __init__(self, name, salary):\n    self.name = name\n    self.sal = salary\n  def show(self):\n    print(f\"name is {self.name} and salary is {self.sal}\")\n  def __str__(self):\n    return f\"name is {self.name} and salary is {self.sal}\"\n  def __repr__(self):\n    return f\"parenst(name={self.name}, salary={self.sal})\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parenst",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class parenst:\n    def __init__(self, name, salary):\n        self.name = name\n        self.sal = salary\n    def show(self):\n        print(f\"name is {self.name} and salary is {self.sal}\")\n    def salal(self):\n      return int(10000)\nclass son(parenst):\n    def __init__(self, name, salary, lang, exp):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "son",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class son(parenst):\n    def __init__(self, name, salary, lang, exp):\n        super().__init__(name, salary)\n        self.languge = lang\n        self.exp = exp\n    def show(self):\n        print(f\"name is {self.name} and salary is {self.sal} and experiance is {self.exp} and languge is {self.languge}\")\n    def salaryplus(self, add):\n        return add + super().salal()\nm = son(\"mani\", \"100000\", \"python\", \"5 year\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parenst",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class parenst():\n  def __init__(self, name, salary):\n    self.name = name\n    self.sal = salary\n  def show(self):\n    print(f\"name is {self.name} and salary is {self.sal}\")\n  def __str__(self):\n    return f\"name is {self.name} and salary is {self.sal}\"\n  def __repr__(self):\n    return f\"parenst(name={self.name}, salary={self.sal})\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class Employee:\n  def __init__(self, name):\n    self.name = name\n  def show(self):\n    print(f\"The name is {self.name}\")\nclass Dancer:\n  def __init__(self, dance):\n    self.dance = dance\n  def show(self):\n    print(f\"The dance is {self.dance}\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "Dancer",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class Dancer:\n  def __init__(self, dance):\n    self.dance = dance\n  def show(self):\n    print(f\"The dance is {self.dance}\")\nclass DancerEmployee(Employee, Dancer):\n  def __init__(self, dance, name):\n    self.dance = dance\n    self.name = name\no  = DancerEmployee(\"Kathak\", \"Shivani\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "DancerEmployee",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class DancerEmployee(Employee, Dancer):\n  def __init__(self, dance, name):\n    self.dance = dance\n    self.name = name\no  = DancerEmployee(\"Kathak\", \"Shivani\")\nprint(o.name)\nprint(o.dance)\no.show() \nprint(DancerEmployee.mro())#this is used to decide priority order if funtion with same name present\n#fist come fist serve",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n    def show_details(self):\n        print(f\"Name: {self.name}\")\n        print(f\"Species: {self.species}\")\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        Animal.__init__(self, name, species=\"Dog\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class Dog(Animal):\n    def __init__(self, name, breed):\n        Animal.__init__(self, name, species=\"Dog\")\n        self.breed = breed\n    def show_details(self):\n        Animal.show_details(self)\n        print(f\"Breed: {self.breed}\")\nclass GoldenRetriever(Dog):\n    def __init__(self, name, color):\n        Dog.__init__(self, name, breed=\"Golden Retriever\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "GoldenRetriever",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class GoldenRetriever(Dog):\n    def __init__(self, name, color):\n        Dog.__init__(self, name, breed=\"Golden Retriever\")\n        self.color = color\n    def show_details(self):\n        Dog.show_details(self)\n        print(f\"Color: {self.color}\")\no = Dog(\"tommy\", \"Black\")\no.show_details()\nprint(GoldenRetriever.mro())",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class parent():\n  pass\nclass ParentClass1(parent):\n  pass\nclass ParentClass2(parent):\n  pass\nclass HybridClass(ParentClass1, ParentClass2):\n    def __init__(self):\n        ParentClass1.__init__(self)\n        ParentClass2.__init__(self)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "ParentClass1",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class ParentClass1(parent):\n  pass\nclass ParentClass2(parent):\n  pass\nclass HybridClass(ParentClass1, ParentClass2):\n    def __init__(self):\n        ParentClass1.__init__(self)\n        ParentClass2.__init__(self)\n    def hybrid_method(self):\n        print(\"This is a hybrid method\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "ParentClass2",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class ParentClass2(parent):\n  pass\nclass HybridClass(ParentClass1, ParentClass2):\n    def __init__(self):\n        ParentClass1.__init__(self)\n        ParentClass2.__init__(self)\n    def hybrid_method(self):\n        print(\"This is a hybrid method\")\n#above is example of hybrid class\n#Higherical class",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "HybridClass",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class HybridClass(ParentClass1, ParentClass2):\n    def __init__(self):\n        ParentClass1.__init__(self)\n        ParentClass2.__init__(self)\n    def hybrid_method(self):\n        print(\"This is a hybrid method\")\n#above is example of hybrid class\n#Higherical class\nclass ceo():\n  pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "ceo",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class ceo():\n  pass\nclass man1(ceo):\n  pass\nclass man2(ceo):\n  pass\nclass man3(ceo):\n  pass\nclass em1(man1):\n  pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "man1",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class man1(ceo):\n  pass\nclass man2(ceo):\n  pass\nclass man3(ceo):\n  pass\nclass em1(man1):\n  pass\nclass em2(man1):\n  pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "man2",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class man2(ceo):\n  pass\nclass man3(ceo):\n  pass\nclass em1(man1):\n  pass\nclass em2(man1):\n  pass\nclass em3(man1):\n  pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "man3",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class man3(ceo):\n  pass\nclass em1(man1):\n  pass\nclass em2(man1):\n  pass\nclass em3(man1):\n  pass\nclass em4(man1):\n  pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "em1",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class em1(man1):\n  pass\nclass em2(man1):\n  pass\nclass em3(man1):\n  pass\nclass em4(man1):\n  pass\nclass em5(man1):\n  pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "em2",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class em2(man1):\n  pass\nclass em3(man1):\n  pass\nclass em4(man1):\n  pass\nclass em5(man1):\n  pass\nclass em1(man2):\n  pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "em3",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class em3(man1):\n  pass\nclass em4(man1):\n  pass\nclass em5(man1):\n  pass\nclass em1(man2):\n  pass\n#time modul\nimport time",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "em4",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class em4(man1):\n  pass\nclass em5(man1):\n  pass\nclass em1(man2):\n  pass\n#time modul\nimport time\ndef for01():\n  for i in range(1, 1000):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "em5",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class em5(man1):\n  pass\nclass em1(man2):\n  pass\n#time modul\nimport time\ndef for01():\n  for i in range(1, 1000):\n    #print(i)\n    continue",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "em1",
        "kind": 6,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "class em1(man2):\n  pass\n#time modul\nimport time\ndef for01():\n  for i in range(1, 1000):\n    #print(i)\n    continue\ndef while01():\n  i = 0",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "addtwonumber",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def addtwonumber(a, b):\n  add = a + b\n  print(add)\na = int(input(\"enter the number:- \"))\nb = int(input(\"enter the number:- \"))\naddtwonumber(a,b)\n#what is pass in function?\n#pass mean run the code without giving an error where we just define the function but not write the code inside it.\n#pass is used when we want to write the code later.\n#def multiply(a, b):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def multiply(a, b):\n  pass\n# now no error\n# the belo is the part of string\ndef multiply(a = 5, b = 6):\n    print(a + b)\n    print(a , \"a is\")\n    print(b , \"b is\")\nc = int(input(\"Enter thr number\"))\nmultiply(a = c)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def multiply(a = 5, b = 6):\n    print(a + b)\n    print(a , \"a is\")\n    print(b , \"b is\")\nc = int(input(\"Enter thr number\"))\nmultiply(a = c)\n#we just take defult value of the b and a assign the value of c\n# defult case me 1st value is for a and second value is for b \n#but we may define 1st value as b and second vslue as a\n#ex",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mulll",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def mulll(a, b = 8):\n    print(a * b)\nx = int(input(\"enter the number:- \"))\nmulll(b = x)\n#above case give error as a is not given and it is required\n#defult arrgument must be at last of the non define argument \n#variable length argument in function\n#variable as tupule\ndef mulltiply(*args):\n    b = 0",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mulltiply",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def mulltiply(*args):\n    b = 0\n    for x in args:\n        if b  == 0 :\n          b = x\n        else:\n         b = b * x\n    print(b)\n    return b\nc = 0",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def mul(a, b):\n    # (3 commas) this just an example of docstring and just use in funtion to give it's defination\n#    here thew first number is mulltiply by other (3 comass)\n#    pass\na = 55\nb = 77\nmul(a, b)\nprint(mul.__doc__)\n#above is just print the docstring of the function\n#the possition is very important",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def factorial(a):\n    if (a == 0 or a == 1):\n        return a\n    else:\n        return a * factorial(a-1)\na = int(input(\"enterthe number \"))\nprint(factorial(a))\n#must used the return don't print\n#set its just don't store the repeted value and it is always give unorder iteam\n#its unreplaceabl",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mull",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def mull(a, b):\n    try:\n        return a * b\n    except Exception as e:\n      print(e)\n      return e\n    print(\"mani gupta is the king\")\nprint(mull(14, 15))\n#above the mani gupta is the king not excicuted\n#if we want to excute the print statemnet under the finaly then we must use finally",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mull",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def mull(a, b):\n    try:\n        return a * b\n    except Exception as e:\n        print(e)\n        return e\n    finally:\n        print(\"mani gupta is the king\")\nprint(mull(16, 29))\n#here the above code give mani gupta is the ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "funtion",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def funtion():\n  a = 10 \n  print(a)#it prints local a a = 10\n  #so \nprint(a)#it prints global a a = 5\nprint(funtion())#it prints local a a = 10\n#for changing global a in funtion we use global\ndef funtion():\n  global a\n  a = 10",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "funtion",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def funtion():\n  global a\n  a = 10\n  print(a)\nprint(funtion())#changing the global a in funtion\n#file handling\n#open use for opening the file\n#w use for writing the file\n#r use for reading the file\n#a use for appending the file",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def add(fx, y):\n  return fx(y) + 8\nprint(add(factorial, 5))\n#the above code is used for passing function as a parameter to another function and adding 8 to it\n#what is map fillter and reduce function\n#map function is used for applying function to all the element of the list\nmy_list = [1,2,3,4,5]\nprint(list(map(squere, my_list)))\n#basicaly it take each valueof list and pass it in the funtion and then append it to new list at the end give new list\n#the above code is used for applying function to all the element of the list",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "my_func",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def my_func(x):\n  return x%2 == 0\nprint(list(filter(my_func, my_list)))#it give the number which are even\n#what is diffrent between is and == \n#both are compare the two objects\n#== compare the value\n# is campare the location in objects identity compare\na = 5\nb = 5\nprint(a is b)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def greeting(fx):\n    def mfx():\n        print(\"hii thanks for calling me\")\n        fx()\n        print(\"thanks\")\n    return mfx\n@greeting#its call by this\ndef hello():\n  print(\"you are in hello\")\nhello()",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def hello():\n  print(\"you are in hello\")\nhello()\ngreeting(hello())#this is also do same thing its like funtion in funtion\ndef greeting1(fx):\n  def mxf(*args, **kwargs):\n    print(\"this is first part\")\n    fx(*args, **kwargs)\n    print(\"you are gong to deport\") \n  return mxf",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "greeting1",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def greeting1(fx):\n  def mxf(*args, **kwargs):\n    print(\"this is first part\")\n    fx(*args, **kwargs)\n    print(\"you are gong to deport\") \n  return mxf\n@greeting1\ndef add(a, b):\n  print(a + b)\nadd(2, 23254)  ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def add(a, b):\n  print(a + b)\nadd(2, 23254)  \n#what is geeter seeter and deleter\nclass MyClass:\n  def __init__(self, value):\n      self._value = value\n      print(\"this is init\")\n  def show(self):\n    print(f\"Value is {self._value}\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "for01",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def for01():\n  for i in range(1, 1000):\n    #print(i)\n    continue\ndef while01():\n  i = 0\n  while i < 1000:\n    #print(i)\n    i = i + 1\nseconds = time.time()",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "while01",
        "kind": 2,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "def while01():\n  i = 0\n  while i < 1000:\n    #print(i)\n    i = i + 1\nseconds = time.time()\nfor01()\nprint(time.time() - seconds)\nsec = time.time()\nwhile01()",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = str(input(\"enter the number 1 :- \",))\nb = str(input(\"enter the number 2 :- \",))\nc = str(input(\"enter the number 3 :- \",))\nd = str(input(j\"enter the number 4 :- \",))\ne = str(input(\"enter the number 5 :- \",))\nprint(a + b + c + d + e)\n#module is the code which writen alredy adu cycle improment not invention. it install by :- pip install \"name of module\". there are some bultine modules.\n#first programe date 20 feb 2024\nprint(\"hello word\")\n#please dont use file names of modules.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = str(input(\"enter the number 2 :- \",))\nc = str(input(\"enter the number 3 :- \",))\nd = str(input(j\"enter the number 4 :- \",))\ne = str(input(\"enter the number 5 :- \",))\nprint(a + b + c + d + e)\n#module is the code which writen alredy adu cycle improment not invention. it install by :- pip install \"name of module\". there are some bultine modules.\n#first programe date 20 feb 2024\nprint(\"hello word\")\n#please dont use file names of modules.\n#pythone as a calculater.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "c = str(input(\"enter the number 3 :- \",))\nd = str(input(j\"enter the number 4 :- \",))\ne = str(input(\"enter the number 5 :- \",))\nprint(a + b + c + d + e)\n#module is the code which writen alredy adu cycle improment not invention. it install by :- pip install \"name of module\". there are some bultine modules.\n#first programe date 20 feb 2024\nprint(\"hello word\")\n#please dont use file names of modules.\n#pythone as a calculater.\nprint(5+6+7+8, 99/22)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "d = str(input(j\"enter the number 4 :- \",))\ne = str(input(\"enter the number 5 :- \",))\nprint(a + b + c + d + e)\n#module is the code which writen alredy adu cycle improment not invention. it install by :- pip install \"name of module\". there are some bultine modules.\n#first programe date 20 feb 2024\nprint(\"hello word\")\n#please dont use file names of modules.\n#pythone as a calculater.\nprint(5+6+7+8, 99/22)\n#comments are the lines which ignore by interpiter.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "e = str(input(\"enter the number 5 :- \",))\nprint(a + b + c + d + e)\n#module is the code which writen alredy adu cycle improment not invention. it install by :- pip install \"name of module\". there are some bultine modules.\n#first programe date 20 feb 2024\nprint(\"hello word\")\n#please dont use file names of modules.\n#pythone as a calculater.\nprint(5+6+7+8, 99/22)\n#comments are the lines which ignore by interpiter.\n#for multiline commentuse:-3times'",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = input(\"enter the number:- \", )\nb = input(\"do you want to enter new number \",)\nprint(int(a) + int(b))\n#by default inpute is a string\na = input(\"enter the number:- \", )\nb = input(\"do you want to enter new number \",)\n# for integer use int() for float () for str()\n#how mulltiplication work on string it's just write it x times\nprint(10 * (a+b))\n#for real multiplication on inpute make inpute as int",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = input(\"do you want to enter new number \",)\nprint(int(a) + int(b))\n#by default inpute is a string\na = input(\"enter the number:- \", )\nb = input(\"do you want to enter new number \",)\n# for integer use int() for float () for str()\n#how mulltiplication work on string it's just write it x times\nprint(10 * (a+b))\n#for real multiplication on inpute make inpute as int\nprint(10 * int((a+b)))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = input(\"enter the number:- \", )\nb = input(\"do you want to enter new number \",)\n# for integer use int() for float () for str()\n#how mulltiplication work on string it's just write it x times\nprint(10 * (a+b))\n#for real multiplication on inpute make inpute as int\nprint(10 * int((a+b)))\nprint(10 * int((int(a)+int(b))))\n#string slicing\nc = \"manithe\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = input(\"do you want to enter new number \",)\n# for integer use int() for float () for str()\n#how mulltiplication work on string it's just write it x times\nprint(10 * (a+b))\n#for real multiplication on inpute make inpute as int\nprint(10 * int((a+b)))\nprint(10 * int((int(a)+int(b))))\n#string slicing\nc = \"manithe\"\n#how to write mullti line string",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "c = \"manithe\"\n#how to write mullti line string\nd = \"\"\"mani\n       seeker\n       the dohol is vaging\"\"\"\n#for blank line before print use:- print(\"\\n anything\")\nprint(\"\\nCreating a multiline String: \") \n#In this example, we will define a string in Python and access its characters using positive and negative indexing. The 0th element will be the first character of the string whereas the -1th element is the last character of the string.\nprint(c[0])\n#print(c[0]) mean print the first character of string 0 starting point on pythone",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "d = \"\"\"mani\n       seeker\n       the dohol is vaging\"\"\"\n#for blank line before print use:- print(\"\\n anything\")\nprint(\"\\nCreating a multiline String: \") \n#In this example, we will define a string in Python and access its characters using positive and negative indexing. The 0th element will be the first character of the string whereas the -1th element is the last character of the string.\nprint(c[0])\n#print(c[0]) mean print the first character of string 0 starting point on pythone\nprint(c[1:3])\n#print(c[1:3]) mean print the character from 1 to 2 because the last number is is always n-1 in python",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "gfg",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "gfg = \"geeksforgeeks\"\nprint(gfg[::-1])\n#string slicing\nlist1 = list(String1) \nlist1[2] = 'p'\nString2 = ''.join(list1) \nprint(\"\\nUpdating character at 2nd Index: \") \nprint(String2) \n#Updating Entire String if we just give two value for same variable then it only take last one value.\n#Deleting a character",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "list1 = list(String1) \nlist1[2] = 'p'\nString2 = ''.join(list1) \nprint(\"\\nUpdating character at 2nd Index: \") \nprint(String2) \n#Updating Entire String if we just give two value for same variable then it only take last one value.\n#Deleting a character\n# Python Program to delete \n# character of a String \nString1 = \"Hello, I'm a Geek\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "list1[2]",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "list1[2] = 'p'\nString2 = ''.join(list1) \nprint(\"\\nUpdating character at 2nd Index: \") \nprint(String2) \n#Updating Entire String if we just give two value for same variable then it only take last one value.\n#Deleting a character\n# Python Program to delete \n# character of a String \nString1 = \"Hello, I'm a Geek\"\nprint(\"Initial String: \") ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String2",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String2 = ''.join(list1) \nprint(\"\\nUpdating character at 2nd Index: \") \nprint(String2) \n#Updating Entire String if we just give two value for same variable then it only take last one value.\n#Deleting a character\n# Python Program to delete \n# character of a String \nString1 = \"Hello, I'm a Geek\"\nprint(\"Initial String: \") \nprint(String1) ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"Hello, I'm a Geek\"\nprint(\"Initial String: \") \nprint(String1) \nprint(\"Deleting character at 2nd Index:\") \ndel String1[2] \nprint(String1)\n#Deleting Entire String\n# Python Program to Delete \n# entire String \nString1 = \"Hello, I'm a Geek\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"Hello, I'm a Geek\"\nprint(\"Initial String: \") \nprint(String1) \n# Deleting a String \n# with the use of del \ndel String1 \nprint(\"\\nDeleting entire String: \") \nprint(String1) \n#Escape Sequencing in Python\n#While printing Strings with single and double quotes in it causes SyntaxError because String already contains Single and Double Quotes and hence cannot be printed with the use of either of these. Hence, to print such a String either Triple Quotes are used or Escape sequences are used to print Strings. ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "d = \"Mani the seeker\"\n# Program to reverse a string \ngfg = \"geeksforgeeks\"\n# Reverse the string using reversed and join function \ngfg = \"\".join(reversed(gfg)) \nprint(gfg) \n# Printing Paths with the \n# use of Tab \nString1 = \"Hi\\tGeeks\"\nprint(\"\\nTab: \") ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "gfg",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "gfg = \"geeksforgeeks\"\n# Reverse the string using reversed and join function \ngfg = \"\".join(reversed(gfg)) \nprint(gfg) \n# Printing Paths with the \n# use of Tab \nString1 = \"Hi\\tGeeks\"\nprint(\"\\nTab: \") \nprint(String1) \n# Printing Paths with the ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "gfg",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "gfg = \"\".join(reversed(gfg)) \nprint(gfg) \n# Printing Paths with the \n# use of Tab \nString1 = \"Hi\\tGeeks\"\nprint(\"\\nTab: \") \nprint(String1) \n# Printing Paths with the \n# use of New Line \nString1 = \"Python\\nGeeks\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"Hi\\tGeeks\"\nprint(\"\\nTab: \") \nprint(String1) \n# Printing Paths with the \n# use of New Line \nString1 = \"Python\\nGeeks\"\nprint(\"\\nNew Line: \") \nprint(String1) \nprint(d.upper())\n#print(d.upper()) mean print the string in upper case but it not change the original string",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"Python\\nGeeks\"\nprint(\"\\nNew Line: \") \nprint(String1) \nprint(d.upper())\n#print(d.upper()) mean print the string in upper case but it not change the original string\nprint(d.lower())\n#print(d.lower()) mean print the string in lower case but it not change the original string\nprint(d.capitalize())\n#print(d.capitalize()) mean print the string with first letter capitalized and all other are small\nprint(d.title())",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"{} {} {}\".format('Geeks', 'For', 'Life') \nprint(\"Print String in default order: \") \nprint(String1) \n# Positional Formatting \nString1 = \"{1} {0} {2}\".format('Geeks', 'For', 'Life') \nprint(\"\\nPrint String in Positional order: \") \nprint(String1) \n# Keyword Formatting \nString1 = \"{l} {f} {g}\".format(g='Geeks', f='For', l='Life') \nprint(\"\\nPrint String in order of Keywords: \") ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"{1} {0} {2}\".format('Geeks', 'For', 'Life') \nprint(\"\\nPrint String in Positional order: \") \nprint(String1) \n# Keyword Formatting \nString1 = \"{l} {f} {g}\".format(g='Geeks', f='For', l='Life') \nprint(\"\\nPrint String in order of Keywords: \") \nprint(String1) \n#Integers such as Binary, hexadecimal, etc., and floats can be rounded or displayed in the exponent form with the use of format specifiers. \n# Formatting of Integers \nString1 = \"{0:b}\".format(16) ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"{l} {f} {g}\".format(g='Geeks', f='For', l='Life') \nprint(\"\\nPrint String in order of Keywords: \") \nprint(String1) \n#Integers such as Binary, hexadecimal, etc., and floats can be rounded or displayed in the exponent form with the use of format specifiers. \n# Formatting of Integers \nString1 = \"{0:b}\".format(16) \nprint(\"\\nBinary representation of 16 is \") \nprint(String1) \n# Formatting of Floats \nString1 = \"{0:e}\".format(165.6458) ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"{0:b}\".format(16) \nprint(\"\\nBinary representation of 16 is \") \nprint(String1) \n# Formatting of Floats \nString1 = \"{0:e}\".format(165.6458) \nprint(\"\\nExponent representation of 165.6458 is \") \nprint(String1) \n# Rounding off Integers \nString1 = \"{0:.2f}\".format(1/6) \nprint(\"\\none-sixth is : \") ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"{0:e}\".format(165.6458) \nprint(\"\\nExponent representation of 165.6458 is \") \nprint(String1) \n# Rounding off Integers \nString1 = \"{0:.2f}\".format(1/6) \nprint(\"\\none-sixth is : \") \nprint(String1) \n#A string can be left, right, or center aligned with the use of format specifiers, separated by a colon(:). The (<) indicates that the string should be aligned to the left, (>) indicates that the string should be aligned to the right and (^) indicates that the string should be aligned to the center. We can also specify the length in which it should be aligned. For example, (<10) means that the string should be aligned to the left within a field of width of 10 characters.\n# String alignment \nString1 = \"|{:<10}|{:^10}|{:>10}|\".format('Geeks', ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"{0:.2f}\".format(1/6) \nprint(\"\\none-sixth is : \") \nprint(String1) \n#A string can be left, right, or center aligned with the use of format specifiers, separated by a colon(:). The (<) indicates that the string should be aligned to the left, (>) indicates that the string should be aligned to the right and (^) indicates that the string should be aligned to the center. We can also specify the length in which it should be aligned. For example, (<10) means that the string should be aligned to the left within a field of width of 10 characters.\n# String alignment \nString1 = \"|{:<10}|{:^10}|{:>10}|\".format('Geeks', \n\t\t\t\t\t\t\t\t\t\t'for', \n\t\t\t\t\t\t\t\t\t\t'Geeks') \nprint(\"\\nLeft, center and right alignment with Formatting: \") \nprint(String1) ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"|{:<10}|{:^10}|{:>10}|\".format('Geeks', \n\t\t\t\t\t\t\t\t\t\t'for', \n\t\t\t\t\t\t\t\t\t\t'Geeks') \nprint(\"\\nLeft, center and right alignment with Formatting: \") \nprint(String1) \n# To demonstrate aligning of spaces \nString1 = \"\\n{0:^16} was founded in {1:<4}!\".format(\"GeeksforGeeks\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t2009) \nprint(String1) \n#Left, center and right alignment with Formatting: ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "String1 = \"\\n{0:^16} was founded in {1:<4}!\".format(\"GeeksforGeeks\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t2009) \nprint(String1) \n#Left, center and right alignment with Formatting: \n#|Geeks     |   for    |     Geeks|\n# GeeksforGeeks   was founded in 2009 !\n#Old-style formatting was done without the use of the format method by using the % operator \n# Python Program for \n# Old Style Formatting \n# of Integers ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "Integer1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "Integer1 = 12.3456789\nprint(\"Formatting in 3.2f format: \") \nprint('The value of Integer1 is %3.2f' % Integer1) \nprint(\"\\nFormatting in 3.4f format: \") \nprint('The value of Integer1 is %3.4f' % Integer1) \n#conditionals operator > , < , >=, <=, ==,!=\n#!= is not equal to\n#== is equal to\n#< is less than\n# > is greater than",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "e = int(input(\"enter the age number:- \"))\nif e >= 18:\n    print(\"you are eligible to drive vhecal\")\nelse:\n    print(\"you are not eligible to drive vhecal\")\nif(e >= 18):\n    print(\"you are eligible to drive vhecal\")\nelse:\n    print(\"you are not eligible to drive vhecal\")\n#elif means if the previous condition is false then check this condition and use for mulltiple condition.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "num = 15\nif num > 10:\n  print(\"Num is greater than 10\")\n  if num > 20:\n    print(\"Num is also greater than 20\")\n  else:\n    print(\"Num is not greater than 20\")\nelse:\n  print(\"Num is less than 10\")\n# match case statements in python",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "num = int(input(\"enter the number:- \"))\nmatch num:\n  case 1:\n    print(\"Number is 1\")\n  case 5:\n    print(\"Number is 5\")\n  case 10:\n    print(\"Number is 10\")\n  case _:\n    print(\"Number is not 1, 5 or 10\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "day",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "day = str(input(\"enter the day:- \"))       \nmatch day:\n  case \"Monday\":\n    print(\"Today is Monday\")\n  case \"Tuesday\":\n    print(\"Today is Tuesday\")\n  case \"Wednesday\": \n    print(\"Today is Wednesday\")\n  case _:\n    print(\"Today is some other day\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "num = int(input(\"enter the number:- \"))\n# Loop through numbers from 0 to num \nfor i in range(0,num+1):\n  # Print current number\n  print(i)  \n  # Skip printing 0\n  if i == 0:\n    continue\n  # Increment i for next iteration\n  i = i + 1",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "n = int(input(\"enter the number:- \"))\ni = 0\nwhile i < n + 1:\n    print(i)\n    i = i + 1\nelse:\n    print(\"i is no longer less than n\")\n    print(\"i is now\", i)\n    print(\"we are in the else block\")\n#else block is executed when the loop terminates normally.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "i = 0\nwhile i < n + 1:\n    print(i)\n    i = i + 1\nelse:\n    print(\"i is no longer less than n\")\n    print(\"i is now\", i)\n    print(\"we are in the else block\")\n#else block is executed when the loop terminates normally.\n#break and continue statements can alter the normal flow of a loop.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "x = int(input(\"enter the number:- \"))\nwhile True:\n    print(x)\n    i = 0\n    if x > i + 1:\n      break\n    i = i + 1\n#What is function?\n#A function is a block of code which only runs when it is called.\n#Functions help break our program into smaller and modular chunks.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = int(input(\"enter the number:- \"))\nb = int(input(\"enter the number:- \"))\naddtwonumber(a,b)\n#what is pass in function?\n#pass mean run the code without giving an error where we just define the function but not write the code inside it.\n#pass is used when we want to write the code later.\n#def multiply(a, b):\n  # now it gives an error \ndef multiply(a, b):\n  pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = int(input(\"enter the number:- \"))\naddtwonumber(a,b)\n#what is pass in function?\n#pass mean run the code without giving an error where we just define the function but not write the code inside it.\n#pass is used when we want to write the code later.\n#def multiply(a, b):\n  # now it gives an error \ndef multiply(a, b):\n  pass\n# now no error",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "c = int(input(\"Enter thr number\"))\nmultiply(a = c)\n#we just take defult value of the b and a assign the value of c\n# defult case me 1st value is for a and second value is for b \n#but we may define 1st value as b and second vslue as a\n#ex\nmultiply(b = 15, a = 6)\n#what is required array in function?\n#in abve both are not required arrgument\ndef mulll(a, b = 8):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "multiply(a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "multiply(a = c)\n#we just take defult value of the b and a assign the value of c\n# defult case me 1st value is for a and second value is for b \n#but we may define 1st value as b and second vslue as a\n#ex\nmultiply(b = 15, a = 6)\n#what is required array in function?\n#in abve both are not required arrgument\ndef mulll(a, b = 8):\n    print(a * b)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "multiply(b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "multiply(b = 15, a = 6)\n#what is required array in function?\n#in abve both are not required arrgument\ndef mulll(a, b = 8):\n    print(a * b)\nx = int(input(\"enter the number:- \"))\nmulll(b = x)\n#above case give error as a is not given and it is required\n#defult arrgument must be at last of the non define argument \n#variable length argument in function",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "x = int(input(\"enter the number:- \"))\nmulll(b = x)\n#above case give error as a is not given and it is required\n#defult arrgument must be at last of the non define argument \n#variable length argument in function\n#variable as tupule\ndef mulltiply(*args):\n    b = 0\n    for x in args:\n        if b  == 0 :",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mulll(b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "mulll(b = x)\n#above case give error as a is not given and it is required\n#defult arrgument must be at last of the non define argument \n#variable length argument in function\n#variable as tupule\ndef mulltiply(*args):\n    b = 0\n    for x in args:\n        if b  == 0 :\n          b = x",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "c = 0\nwhile True:\n   x = int(input(\"enter the number:- \"))\n   if x == 1:\n      multiply(x)\n      break\n   if c == 0:\n      c = x\n      continue\n   mulltiply(x, c)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "l = [1,2,3,4,5,6,7,8,9]\nprint(l)\nprint(l[0])\n#adding element on lost.\n#list may contain different data types.\nl.append(13)\nprint(l)\n# For finding an element in list must use same data type if we take number as string in if statement then it give error because the l contine integer\n#jump index\n#if we want to jump from a to c and skip b",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "l.sort(reverse",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "l.sort(reverse = True)\nprint(l)\n#reverse in the list.\nl = [1,2,3,4,5,6,7,8,9]\nl.reverse()\nprint(l) \n#for finding index of the element in list fist occurance.\nprint(l.index(5))\n#for finding how many times comes an element in list.\nprint(l.count(5))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "l = [1,2,3,4,5,6,7,8,9]\nl.reverse()\nprint(l) \n#for finding index of the element in list fist occurance.\nprint(l.index(5))\n#for finding how many times comes an element in list.\nprint(l.count(5))\n#why to use copy mot this n = l\n#because then if we change the l then n will automatically changes\nn = l",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "n = l\n#inserting element at particular place(index)\nl.insert(2, 26)\nprint(l, \"is the value of l\")\nprint(n, \"is the value of n\")\n#if we use copy then it will not change the n\nl = [1,2,3,4,5,6,7,8,9]\nn = l.copy()\nl.append(45)\n#extend mean add at the last",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "l = [1,2,3,4,5,6,7,8,9]\nn = l.copy()\nl.append(45)\n#extend mean add at the last\nl.extend([10,11,12])\nprint(l, \"is the value of l\")\nprint(n, \"is the value of n\")\n#what is different between append and extend\n#append treat the whole list as one element if we append x in l then whole element of x are treted as an single elment list in list\nx = [1, 44, 12]",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "n = l.copy()\nl.append(45)\n#extend mean add at the last\nl.extend([10,11,12])\nprint(l, \"is the value of l\")\nprint(n, \"is the value of n\")\n#what is different between append and extend\n#append treat the whole list as one element if we append x in l then whole element of x are treted as an single elment list in list\nx = [1, 44, 12]\nl.append(x)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "x = [1, 44, 12]\nl.append(x)\nprint(l)\n#what is tupple.\n#it's the like list but not changeable\nl = (1, 2, 3, 4)\nprint(l)\n#l.append(12)\n#it give error as tupple is not changeable\n#if we want to change the tupple then we have to create new tupple",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "l = (1, 2, 3, 4)\nprint(l)\n#l.append(12)\n#it give error as tupple is not changeable\n#if we want to change the tupple then we have to create new tupple\n#l = (1)\nprint(type(l))\n#in above it say the type is int not tuple so for tuple must use one comma after the num\n#l = (1,)\nprint(type(l))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#l",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#l = (1)\nprint(type(l))\n#in above it say the type is int not tuple so for tuple must use one comma after the num\n#l = (1,)\nprint(type(l))\n#now the type is tuple\n#all indexing and other thing are same in tuple like list\n#slcing of the tuple is possible \nprint(l[1:])\n#tuple also contain diffrent types like int, string, float etc.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#l",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#l = (1,)\nprint(type(l))\n#now the type is tuple\n#all indexing and other thing are same in tuple like list\n#slcing of the tuple is possible \nprint(l[1:])\n#tuple also contain diffrent types like int, string, float etc.\n#tupple is faster than list\n#the below is the way to change tupule\n#st -1 make an temporary list",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "l = (1, 5, 7, 6, 12)\nprint(l)\nx = list(l)\nx[1] = 10\nx.extend((16, 18, 3, 13))\nl = tuple(x)\nprint(l)\n#tuple methods are same as the list\n#What is the docstring?\n#it may take as outpute. for write the def of the funtion",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "x = list(l)\nx[1] = 10\nx.extend((16, 18, 3, 13))\nl = tuple(x)\nprint(l)\n#tuple methods are same as the list\n#What is the docstring?\n#it may take as outpute. for write the def of the funtion\n#it is just beloe the funtion.\ndef mul(a, b):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "x[1]",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "x[1] = 10\nx.extend((16, 18, 3, 13))\nl = tuple(x)\nprint(l)\n#tuple methods are same as the list\n#What is the docstring?\n#it may take as outpute. for write the def of the funtion\n#it is just beloe the funtion.\ndef mul(a, b):\n    # (3 commas) this just an example of docstring and just use in funtion to give it's defination",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "l = tuple(x)\nprint(l)\n#tuple methods are same as the list\n#What is the docstring?\n#it may take as outpute. for write the def of the funtion\n#it is just beloe the funtion.\ndef mul(a, b):\n    # (3 commas) this just an example of docstring and just use in funtion to give it's defination\n#    here thew first number is mulltiply by other (3 comass)\n#    pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = 55\nb = 77\nmul(a, b)\nprint(mul.__doc__)\n#above is just print the docstring of the function\n#the possition is very important\n#what is pep\n#what is recurtion\ndef factorial(a):\n    if (a == 0 or a == 1):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = 77\nmul(a, b)\nprint(mul.__doc__)\n#above is just print the docstring of the function\n#the possition is very important\n#what is pep\n#what is recurtion\ndef factorial(a):\n    if (a == 0 or a == 1):\n        return a",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = int(input(\"enterthe number \"))\nprint(factorial(a))\n#must used the return don't print\n#set its just don't store the repeted value and it is always give unorder iteam\n#its unreplaceabl\n#it may contain diffrent data type\n#it cant be exces by index number\nempty_set = set()  # Empty set is not like {} as it gives a dictionary\nprint(type(empty_set))\n#if this {}",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "empty_set",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "empty_set = set()  # Empty set is not like {} as it gives a dictionary\nprint(type(empty_set))\n#if this {}\nempty_set = {}\nprint(type(empty_set)) # this is give dictionary\nempty_set = {\"mani\", \"gupta\", \"gyan\", \"soham\"}\n#empty_set[1] = \"mani\" #it give error\n#empty_set.append(\"mani\") #it give error\n# we may add element in the set.\nempty_set.add(\"ifgxsfg\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "empty_set",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "empty_set = {}\nprint(type(empty_set)) # this is give dictionary\nempty_set = {\"mani\", \"gupta\", \"gyan\", \"soham\"}\n#empty_set[1] = \"mani\" #it give error\n#empty_set.append(\"mani\") #it give error\n# we may add element in the set.\nempty_set.add(\"ifgxsfg\")\nprint(empty_set)\n#mathamatical oprations on set\ns1 = {1, 2, 5}",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "empty_set",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "empty_set = {\"mani\", \"gupta\", \"gyan\", \"soham\"}\n#empty_set[1] = \"mani\" #it give error\n#empty_set.append(\"mani\") #it give error\n# we may add element in the set.\nempty_set.add(\"ifgxsfg\")\nprint(empty_set)\n#mathamatical oprations on set\ns1 = {1, 2, 5}\ns2 = {12, 5, 3, 2}\nprint(s1.difference(s2))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#empty_set[1]",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#empty_set[1] = \"mani\" #it give error\n#empty_set.append(\"mani\") #it give error\n# we may add element in the set.\nempty_set.add(\"ifgxsfg\")\nprint(empty_set)\n#mathamatical oprations on set\ns1 = {1, 2, 5}\ns2 = {12, 5, 3, 2}\nprint(s1.difference(s2))\nprint(s1.intersection(s2))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s1 = {1, 2, 5}\ns2 = {12, 5, 3, 2}\nprint(s1.difference(s2))\nprint(s1.intersection(s2))\nprint(s1.union(s2))\nprint(s1.symmetric_difference(s2))\nprint(s1.issuperset(s2))\nprint(s2.issuperset(s1))\nprint(s1.issubset(s2))\nprint(s1.isdisjoint(s2))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s2 = {12, 5, 3, 2}\nprint(s1.difference(s2))\nprint(s1.intersection(s2))\nprint(s1.union(s2))\nprint(s1.symmetric_difference(s2))\nprint(s1.issuperset(s2))\nprint(s2.issuperset(s1))\nprint(s1.issubset(s2))\nprint(s1.isdisjoint(s2))\n# The update() method updates the set by adding elements from another set.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s1 = {1, 2, 5}\ns2 = {12, 5, 3, 2}\ns1.update(s2)\nprint(s1)  # {1, 2, 3, 5, 12}\n# It can also add elements from other iterables like lists:\ns1 = {1, 2, 5}\ns2 = [3, 4, 6]\ns1.update(s2)\nprint(s1)  # {1, 2, 3, 4, 5, 6}\ns1.intersection_update(s2)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s2 = {12, 5, 3, 2}\ns1.update(s2)\nprint(s1)  # {1, 2, 3, 5, 12}\n# It can also add elements from other iterables like lists:\ns1 = {1, 2, 5}\ns2 = [3, 4, 6]\ns1.update(s2)\nprint(s1)  # {1, 2, 3, 4, 5, 6}\ns1.intersection_update(s2)\nprint(s1)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s1 = {1, 2, 5}\ns2 = [3, 4, 6]\ns1.update(s2)\nprint(s1)  # {1, 2, 3, 4, 5, 6}\ns1.intersection_update(s2)\nprint(s1)\nprint(s2)\n#above s1 update by intersection of s1 and s2\n#remove an item using remove() function\ns1.remove(3)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s2 = [3, 4, 6]\ns1.update(s2)\nprint(s1)  # {1, 2, 3, 4, 5, 6}\ns1.intersection_update(s2)\nprint(s1)\nprint(s2)\n#above s1 update by intersection of s1 and s2\n#remove an item using remove() function\ns1.remove(3)\nprint(s1)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s2 = {1, 2, 5, 3, 12, 123}\nb = s2.pop()\nprint(b)\n#what is del\n#del s1\n#print(s1) #give an error of s1 not exist\n#clear just remove all elemnt in the set\ns1.clear()\nprint(s1)\n#if value exist all are same as the list",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = s2.pop()\nprint(b)\n#what is del\n#del s1\n#print(s1) #give an error of s1 not exist\n#clear just remove all elemnt in the set\ns1.clear()\nprint(s1)\n#if value exist all are same as the list\n#What is a dictionary? this is orderd",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s = {\n    1: \"mani\",\n    2: \"kumar\",\n    3: \"suresh\",\n    4: \"rohan\",\n    5: \"raj\",\n    6: \"ram\",\n    7: \"shyam\",\n    8: \"mohan\"\n}",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s1 = {1: \"mani\", 2: \"rohan\", 3: \"krisna\", 4: \"raj\", 5: \"ram\", 6: \"shyam\"}\ns3 = {7: \"mohan\", 8: \"sohan\", 9: \"roshan\", 10: \"suresh\"}\nprint(s1)\nprint(s3)\ns1.update(s3)\nprint(s1, \"its after update\") #updates the s1 and add all elemant of s3 to s1\ns3.clear() #clear the all element of the discnary and make it empty discnary\nprint(s3)\n#pop\ns1.pop(1)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "s3 = {7: \"mohan\", 8: \"sohan\", 9: \"roshan\", 10: \"suresh\"}\nprint(s1)\nprint(s3)\ns1.update(s3)\nprint(s1, \"its after update\") #updates the s1 and add all elemant of s3 to s1\ns3.clear() #clear the all element of the discnary and make it empty discnary\nprint(s3)\n#pop\ns1.pop(1)\nprint(s1)#remove the value of 1  from s1 coresponding to key 1",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = input(\"entere the number \")\n# for i in range(1, 11):\n#  print(f\"{a} x {i} = {int(a)*i}\")\n# if enter an string in a then it just give error of invalid literal and program stops\n# print(\"some important code id here\")\n# the above code dont run after the error\n# to run the code after error we must have to use error handling\ntry:\n    for i in range(1, 11):\n        print(f\"{a} x {i} = {int(a)*i}\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = input(\"enter the number between 5 to 9\")\nif isinstance(a, int):\n    if int(a)<5 or int(a)>5:\n        raise ValueError(\"the number is not in between 5 to 9\")\nif a == \"quit\":\n  pass\nelse:\n  raise ValueError(\"the number is not entered\")\n#there is many ways to raise error in many diffrent cases\n#JUSWTTEST FOR GIT AGAIN",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = int(input(\"enter the num one\"))\nb = int(input(\"enter the num two\"))\nprint(a) if a > b else print(b)\n#at last must write else if not then it will give error and not excicuted\nprint(a) if a > b else print(b) if b == a else \"\"\n#may use like that\nc = 9 if a>b else 0 # give zero if a<b or a == b. and give 9 if a>b\nprint(c)\n#what is the enumerate\n#enumerate is just remove the use of index and use the value of the element ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = int(input(\"enter the num two\"))\nprint(a) if a > b else print(b)\n#at last must write else if not then it will give error and not excicuted\nprint(a) if a > b else print(b) if b == a else \"\"\n#may use like that\nc = 9 if a>b else 0 # give zero if a<b or a == b. and give 9 if a>b\nprint(c)\n#what is the enumerate\n#enumerate is just remove the use of index and use the value of the element \na = [1, 12, 15, 4, 5, 6]",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "c = 9 if a>b else 0 # give zero if a<b or a == b. and give 9 if a>b\nprint(c)\n#what is the enumerate\n#enumerate is just remove the use of index and use the value of the element \na = [1, 12, 15, 4, 5, 6]\nfor index, i in enumerate(a):#here index give the value of how mnany times this loop runes before elemnt i index must be before i \n    print(index, i)\n#index ki value defult zero se suru hoga but if i want to strt it from any specific value then.\nfor index, i in enumerate(a, start=1):\n    print(index, i)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = [1, 12, 15, 4, 5, 6]\nfor index, i in enumerate(a):#here index give the value of how mnany times this loop runes before elemnt i index must be before i \n    print(index, i)\n#index ki value defult zero se suru hoga but if i want to strt it from any specific value then.\nfor index, i in enumerate(a, start=1):\n    print(index, i)\n#how to make virtual envirment\n#ye sirf ek alag envirment bana deta hai jiska main python se koi lenea dena nbahi hai\n#its just make seprate envirement jiskop koi main python ke module install karna padta hai\n# run this comand in the folder where you want to make virtual enverment:    python -m venv name",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = \"mani gupta king\"\nmanie.name1() #see here mani gupta is printing 2 times for that we use if __name__ == \"__main__\"\n#so now we update the code of manie\n#now it just print onces\n#ye batata hai ki isko kaha se call kar rahe hai same file se ya kisi aur file se as module leke\n#here it is not give main it gives manie\n# what is os module\n#it just use to use some functions of copy file pastcut edit, delet, creater, rename etc\nimport os\nif (not os.path.exists(\"osmodule test\")):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = 5\ndef funtion():\n  a = 10 \n  print(a)#it prints local a a = 10\n  #so \nprint(a)#it prints global a a = 5\nprint(funtion())#it prints local a a = 10\n#for changing global a in funtion we use global\ndef funtion():\n  global a",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = open('100dayschellenge/projects/filehandling/file.txt', 'r', encoding='utf-8')\nprint(a)\ntext = a.read()\nprint(text)\na.close()\n#the above shows how to use the open function read mode and execess the file's data\n#the above code is used for reading the file\n#a.close() use for closing the file\n#the above code is used for closing the file\n#now we use write mode",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "text = a.read()\nprint(text)\na.close()\n#the above shows how to use the open function read mode and execess the file's data\n#the above code is used for reading the file\n#a.close() use for closing the file\n#the above code is used for closing the file\n#now we use write mode\n#a = open('100dayschellenge/projects/file.txt', 'w')\n#a.write(\"hello\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#a = open('100dayschellenge/projects/file.txt', 'w')\n#a.write(\"hello\")\n#the above code is used for writing the file\n#we remove the prebiouse text and write the new text here it's hello\na = open('100dayschellenge/projects/filehandling/file.txt', 'a')\na.write(\"hello\\n\")\na.close()#close is must\n#if we use write and file is not exist it will creat file with that name\n#append also able to write the file and craet new file it not exist\na = open('100dayschellenge/projects/filehandling/file1.txt', 'w')#here file1.txt not exist but i creat new file and add hello",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = open('100dayschellenge/projects/filehandling/file.txt', 'a')\na.write(\"hello\\n\")\na.close()#close is must\n#if we use write and file is not exist it will creat file with that name\n#append also able to write the file and craet new file it not exist\na = open('100dayschellenge/projects/filehandling/file1.txt', 'w')#here file1.txt not exist but i creat new file and add hello\na.write(\"hello\\n\")\na.close()\n#the above code is used for creating the file\n#the new way to doing same thing is by with",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = open('100dayschellenge/projects/filehandling/file1.txt', 'w')#here file1.txt not exist but i creat new file and add hello\na.write(\"hello\\n\")\na.close()\n#the above code is used for creating the file\n#the new way to doing same thing is by with\nwith open('100dayschellenge/projects/filehandling/file2.txt', 'w') as file:\n  file.write(\"hello hiie\\n\")\nwith open('100dayschellenge/projects/filehandling/file2.txt', 'r') as file:\n  print(file.read())\n#the above code is used for reading the file",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "squere",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "squere = lambda x: x*x\nprint(squere(2))\n#the above code is used for creating function in one line\nfactorial = lambda x: 1 if x == 0 else x * factorial(x-1)\nprint(factorial(5))\nthree = lambda x,y,z: (x+y+z)/5\nprint(three(10,20,30))\nn_num_avg = lambda *x: sum(x)/len(x)\nprint(n_num_avg(10,20,30,40,50))\n#we may pass function as a parameter to another function",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "factorial = lambda x: 1 if x == 0 else x * factorial(x-1)\nprint(factorial(5))\nthree = lambda x,y,z: (x+y+z)/5\nprint(three(10,20,30))\nn_num_avg = lambda *x: sum(x)/len(x)\nprint(n_num_avg(10,20,30,40,50))\n#we may pass function as a parameter to another function\ndef add(fx, y):\n  return fx(y) + 8\nprint(add(factorial, 5))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "three",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "three = lambda x,y,z: (x+y+z)/5\nprint(three(10,20,30))\nn_num_avg = lambda *x: sum(x)/len(x)\nprint(n_num_avg(10,20,30,40,50))\n#we may pass function as a parameter to another function\ndef add(fx, y):\n  return fx(y) + 8\nprint(add(factorial, 5))\n#the above code is used for passing function as a parameter to another function and adding 8 to it\n#what is map fillter and reduce function",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "n_num_avg",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "n_num_avg = lambda *x: sum(x)/len(x)\nprint(n_num_avg(10,20,30,40,50))\n#we may pass function as a parameter to another function\ndef add(fx, y):\n  return fx(y) + 8\nprint(add(factorial, 5))\n#the above code is used for passing function as a parameter to another function and adding 8 to it\n#what is map fillter and reduce function\n#map function is used for applying function to all the element of the list\nmy_list = [1,2,3,4,5]",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "my_list = [1,2,3,4,5]\nprint(list(map(squere, my_list)))\n#basicaly it take each valueof list and pass it in the funtion and then append it to new list at the end give new list\n#the above code is used for applying function to all the element of the list\n#reduce function is used for applying function to all the element of the list\nfrom functools import reduce\nprint(reduce(lambda x, y: x + y, [1,2,3,4,5]))\n#the above code is used for applying function to all the element of the list\n#it take 2 1st two values and then pass to funtion the output is now the fist value and then 1st and second pass to funtion and so on\n#at the end give the all values output",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = 5\nb = 5\nprint(a is b)\n#if object is immutable then it will give true because python use same memeory and refure three from both side\n#so it's value and location both are same\n#if object is mutable then it will give false because python use different memeory and refure three from both side\n#for example list\na = [1, 2, 3]\nb = [1, 2, 3]\nprint(a is b)#false as two diffrent location used as it is immutable",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = 5\nprint(a is b)\n#if object is immutable then it will give true because python use same memeory and refure three from both side\n#so it's value and location both are same\n#if object is mutable then it will give false because python use different memeory and refure three from both side\n#for example list\na = [1, 2, 3]\nb = [1, 2, 3]\nprint(a is b)#false as two diffrent location used as it is immutable\nprint(a == b)#true as both values is same",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = [1, 2, 3]\nb = [1, 2, 3]\nprint(a is b)#false as two diffrent location used as it is immutable\nprint(a == b)#true as both values is same\n#what is object orianted programing(oop)\n#it just store the variable and able to give diffrent value\n#like railway form wher the formate is fix everyone have diffrent details\n#below we just add some deteils but we may change them for diffrent cases\nclass employ:\n  name = \"mani\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = [1, 2, 3]\nprint(a is b)#false as two diffrent location used as it is immutable\nprint(a == b)#true as both values is same\n#what is object orianted programing(oop)\n#it just store the variable and able to give diffrent value\n#like railway form wher the formate is fix everyone have diffrent details\n#below we just add some deteils but we may change them for diffrent cases\nclass employ:\n  name = \"mani\"\n  occ = \"SDE1\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = employ()\nprint(a.name, a.occ, a.salary)\nclass employ:\n  name = \"mani\"\n  occ = \"SDE1\"\n  salary =  150000\n  def info(self):\n    print(f\"This is {self.name} there salary is {self.salary} There role is {self.occ} \")\n#above info is funtion which \n#it's just like sabki infoprmation ek formate me store kare sakte hai",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = employ()\nprint(a.info())\nb = employ()\nb.name = \"mudit\"\nb.occ = \"manager\"\nb.salary = \"200000\"\nprint(b.info())#self mean jiske liye ye call horaha hai\nc = employ() \nprint(c.info())\n#the above is the sytntext to use",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = employ()\nb.name = \"mudit\"\nb.occ = \"manager\"\nb.salary = \"200000\"\nprint(b.info())#self mean jiske liye ye call horaha hai\nc = employ() \nprint(c.info())\n#the above is the sytntext to use\n#if we don't use defule value then we need to use cons\nclass mani :",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b.name",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b.name = \"mudit\"\nb.occ = \"manager\"\nb.salary = \"200000\"\nprint(b.info())#self mean jiske liye ye call horaha hai\nc = employ() \nprint(c.info())\n#the above is the sytntext to use\n#if we don't use defule value then we need to use cons\nclass mani :\n  name = \" hsk\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b.occ",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b.occ = \"manager\"\nb.salary = \"200000\"\nprint(b.info())#self mean jiske liye ye call horaha hai\nc = employ() \nprint(c.info())\n#the above is the sytntext to use\n#if we don't use defule value then we need to use cons\nclass mani :\n  name = \" hsk\"\n  occ = \"SDK@\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b.salary",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b.salary = \"200000\"\nprint(b.info())#self mean jiske liye ye call horaha hai\nc = employ() \nprint(c.info())\n#the above is the sytntext to use\n#if we don't use defule value then we need to use cons\nclass mani :\n  name = \" hsk\"\n  occ = \"SDK@\"\n  salary = \"28883\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "c = employ() \nprint(c.info())\n#the above is the sytntext to use\n#if we don't use defule value then we need to use cons\nclass mani :\n  name = \" hsk\"\n  occ = \"SDK@\"\n  salary = \"28883\"\n  print(f\"this is {name} there role is {occ} there pay is {salary}\")\ne = mani()",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "e = mani()\ne.name = \"kuntramal\"\ne.occ = \"SDF\"\ne.salary = 3289649\n#we have to use new funtion because it only runs one\n#so we need function which run after editing value.\n#that reson we define info\nclass Person:\n  def __init__(self, n, o, s):\n    print('hii')",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "e.name",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "e.name = \"kuntramal\"\ne.occ = \"SDF\"\ne.salary = 3289649\n#we have to use new funtion because it only runs one\n#so we need function which run after editing value.\n#that reson we define info\nclass Person:\n  def __init__(self, n, o, s):\n    print('hii')\n    self.name = n",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "e.occ",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "e.occ = \"SDF\"\ne.salary = 3289649\n#we have to use new funtion because it only runs one\n#so we need function which run after editing value.\n#that reson we define info\nclass Person:\n  def __init__(self, n, o, s):\n    print('hii')\n    self.name = n\n    self.occ = o",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "e.salary",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "e.salary = 3289649\n#we have to use new funtion because it only runs one\n#so we need function which run after editing value.\n#that reson we define info\nclass Person:\n  def __init__(self, n, o, s):\n    print('hii')\n    self.name = n\n    self.occ = o\n    self.salary = s",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = Person(\"manij\", \"SDE1\", 50000)\nb = Person(\"gorakkh\", \"Maneger\", 150000)\na.info()\nb.info()\n#so above we don't define amything with defult value so we used functions\n#What is decoraters in python\n#it's just decorate the funtion add somrthing at begening and at the end\ndef greeting(fx):\n    def mfx():\n        print(\"hii thanks for calling me\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = Person(\"gorakkh\", \"Maneger\", 150000)\na.info()\nb.info()\n#so above we don't define amything with defult value so we used functions\n#What is decoraters in python\n#it's just decorate the funtion add somrthing at begening and at the end\ndef greeting(fx):\n    def mfx():\n        print(\"hii thanks for calling me\")\n        fx()",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#obj",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#obj = MyClass(10)\n#obj.ten_value = 67\n#print(obj.ten_value)\n#obj._value = 8\n#obj.show()\n#like jaise ham kisi ko acces nahi dena chate hai direct so we use _varialbe;le\n#for the seek of convinenes we judt use geeter and seeter to edite the value and set it\n#seeter use to take value\n#geeter used to change the value\n#we may do this thing without geeter and set but it's good practice",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#obj.ten_value",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#obj.ten_value = 67\n#print(obj.ten_value)\n#obj._value = 8\n#obj.show()\n#like jaise ham kisi ko acces nahi dena chate hai direct so we use _varialbe;le\n#for the seek of convinenes we judt use geeter and seeter to edite the value and set it\n#seeter use to take value\n#geeter used to change the value\n#we may do this thing without geeter and set but it's good practice\n #Inheritage baap  beta. beta bana ne ko in heritage bolte hai.",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#obj._value",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#obj._value = 8\n#obj.show()\n#like jaise ham kisi ko acces nahi dena chate hai direct so we use _varialbe;le\n#for the seek of convinenes we judt use geeter and seeter to edite the value and set it\n#seeter use to take value\n#geeter used to change the value\n#we may do this thing without geeter and set but it's good practice\n #Inheritage baap  beta. beta bana ne ko in heritage bolte hai.\n #whereson has all charecters of father and some new which is there own\nclass mani12(MyClass):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = mani12(\"Python\")\na.show1()\na.ten_value = 33\nprint(a.ten_value)\na.show()\nb = mani12(\"C++\")\nb.show1()\nb._value = 80\nb.show()\n#inheritage me direct variable ko call nahi kar sakte hai iskeliye alag alag hi call kaena padta hai",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a.ten_value",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a.ten_value = 33\nprint(a.ten_value)\na.show()\nb = mani12(\"C++\")\nb.show1()\nb._value = 80\nb.show()\n#inheritage me direct variable ko call nahi kar sakte hai iskeliye alag alag hi call kaena padta hai\n#in python there is no any thing called privet and protected bas itna hai ki __ variable name dene par\n#isko pura naming convention badal jaiga ga like valur to a._class__value",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = mani12(\"C++\")\nb.show1()\nb._value = 80\nb.show()\n#inheritage me direct variable ko call nahi kar sakte hai iskeliye alag alag hi call kaena padta hai\n#in python there is no any thing called privet and protected bas itna hai ki __ variable name dene par\n#isko pura naming convention badal jaiga ga like valur to a._class__value\n#this is to excees private variable\nclass mani325():\n  def __init__(self):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b._value",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b._value = 80\nb.show()\n#inheritage me direct variable ko call nahi kar sakte hai iskeliye alag alag hi call kaena padta hai\n#in python there is no any thing called privet and protected bas itna hai ki __ variable name dene par\n#isko pura naming convention badal jaiga ga like valur to a._class__value\n#this is to excees private variable\nclass mani325():\n  def __init__(self):\n    self.__programing = \"programing\"\n  def show1(self):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "m = mani325()\n#m.__programing = \"C++\"#it doesn't change programing\nm._mani325__programing = \"Python\"#but it change it to Python\nm.show1()\n#static methods\n#jinko self ki jarurat nahi padti jisko class ke bhar bhi use kar sakte hai\nclass static:\n    @staticmethod\n    def mull(a, b):\n        print(a * b)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#m.__programing",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#m.__programing = \"C++\"#it doesn't change programing\nm._mani325__programing = \"Python\"#but it change it to Python\nm.show1()\n#static methods\n#jinko self ki jarurat nahi padti jisko class ke bhar bhi use kar sakte hai\nclass static:\n    @staticmethod\n    def mull(a, b):\n        print(a * b)\nprint(static.mull(15, 25))#by this way also accesable",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "m._mani325__programing",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "m._mani325__programing = \"Python\"#but it change it to Python\nm.show1()\n#static methods\n#jinko self ki jarurat nahi padti jisko class ke bhar bhi use kar sakte hai\nclass static:\n    @staticmethod\n    def mull(a, b):\n        print(a * b)\nprint(static.mull(15, 25))#by this way also accesable\na = static()#this is also valid way to exise ",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = static()#this is also valid way to exise \na.mull(25, 45)\n#instance vs class variable\nclass mania():\n  def __init__(self, prog) :\n     self.programe = prog\n  def add(a, b):\n    print(a + b)\nc = mania(\"python\")\n#c.add(12, 18)# it give error TypeError: mania.__init__() missing 1 required positional argument: 'prog'",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "c = mania(\"python\")\n#c.add(12, 18)# it give error TypeError: mania.__init__() missing 1 required positional argument: 'prog'\n#why because this code is same as mania.add(c)\n#so here clearly c is one variable and we also give two othere so this is the reson\n#let if we just add three variable in funtion\nclass mania():\n  def __init__(self, prog) :\n     self.programe = prog\n  def add(a, b, c):\n    print(c + b)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "c = mania(\"python\")#above we just leave a as a take c\n#we may define it as self so if we make changes in c then it may change by self\nc.add(243, 3487)\n#as we can't use anything from class so no need of self\n#class vs instence variable\nclass mania():\n  company = \"apple\"\n  def __init__(self, prog) :\n     self.programe = prog\n  def add(a, b, c):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = mania(\"python\")\na.company = \"amazon\"\na.show()\n#we may define inside it it woks same in this case but if i want to know count of the\n#data enter then its not usefull in instence\n#it also helphfull when you want to a change whole variable at onc for all then this works leke mania.company = \"anything\"\nclass mania():\n    employ = 0\n    def __init__(self, prog):\n        self.programe = prog",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a.company",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a.company = \"amazon\"\na.show()\n#we may define inside it it woks same in this case but if i want to know count of the\n#data enter then its not usefull in instence\n#it also helphfull when you want to a change whole variable at onc for all then this works leke mania.company = \"anything\"\nclass mania():\n    employ = 0\n    def __init__(self, prog):\n        self.programe = prog\n        mania.employ += 1 #this is the syntext",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = mania(\"python\")\na.company = \"amazon\"\na.show()\nb = mania(\"python\")\nb.company = \"amazon\"\nb.show()\nmania.employ = 0\n#class method to change the company name by funtion for all the cases\nclass mania():\n    company = \"apple\"",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a.company",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a.company = \"amazon\"\na.show()\nb = mania(\"python\")\nb.company = \"amazon\"\nb.show()\nmania.employ = 0\n#class method to change the company name by funtion for all the cases\nclass mania():\n    company = \"apple\"\n    def __init__(self, prog):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = mania(\"python\")\nb.company = \"amazon\"\nb.show()\nmania.employ = 0\n#class method to change the company name by funtion for all the cases\nclass mania():\n    company = \"apple\"\n    def __init__(self, prog):\n        self.programe = prog\n    def add(self, b, c):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b.company",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b.company = \"amazon\"\nb.show()\nmania.employ = 0\n#class method to change the company name by funtion for all the cases\nclass mania():\n    company = \"apple\"\n    def __init__(self, prog):\n        self.programe = prog\n    def add(self, b, c):\n        print(c + b)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "mania.employ",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "mania.employ = 0\n#class method to change the company name by funtion for all the cases\nclass mania():\n    company = \"apple\"\n    def __init__(self, prog):\n        self.programe = prog\n    def add(self, b, c):\n        print(c + b)\n    def show(self):\n        print(f\"her her company is {self.company} and languge is {self.programe} and number is {mania.company}\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = mania(\"python\")\n#a.company = \"amazon\"\na.show()\nb = mania(\"python\")\n#b.company = \"amazon\"\nb.show()\nmania.changecompany(\"amazon\")\nb.show()\na.show()\n#string slicing in class for make complex data simple",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#a.company",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#a.company = \"amazon\"\na.show()\nb = mania(\"python\")\n#b.company = \"amazon\"\nb.show()\nmania.changecompany(\"amazon\")\nb.show()\na.show()\n#string slicing in class for make complex data simple\n#like we have given name and all like mani-120000-SDE!",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = mania(\"python\")\n#b.company = \"amazon\"\nb.show()\nmania.changecompany(\"amazon\")\nb.show()\na.show()\n#string slicing in class for make complex data simple\n#like we have given name and all like mani-120000-SDE!\n#then we can't able to use it directly and if we split it\n#for every people then it mees the code",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "#b.company",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "#b.company = \"amazon\"\nb.show()\nmania.changecompany(\"amazon\")\nb.show()\na.show()\n#string slicing in class for make complex data simple\n#like we have given name and all like mani-120000-SDE!\n#then we can't able to use it directly and if we split it\n#for every people then it mees the code\nclass mania():",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = mania.unformatetoform(\"mani-120000-SDE\")\na.show()\nb = mania.unformatetoform(\"jani-120000-SDE\")\nb.show()\nmania.changecompany(\"amazon\")\nb.show()\na.show()\n#dir(), __dict__ and help() usage\nprint(dir(bn#it just print all methods of the class or funtion",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "b = mania.unformatetoform(\"jani-120000-SDE\")\nb.show()\nmania.changecompany(\"amazon\")\nb.show()\na.show()\n#dir(), __dict__ and help() usage\nprint(dir(b))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n#it just print all methods of the class or funtion\nprint(dir(str))\nprint(b.__dict__)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "m = son(\"mani\", \"100000\", \"python\", \"5 year\")\nm.show()\n#the above code just helpfull for don't repeat the code every time\n#what are the magic method\nclass parenst():\n  def __init__(self, name, salary):\n    self.name = name\n    self.sal = salary\n  def show(self):\n    print(f\"name is {self.name} and salary is {self.sal}\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = parenst(\"mani\", 100000)\nprint(a) #it just print the callable and run the funtion __str__\nprint(repr(a))#Provide string representations for objects\n#__add__ method in Python defines how will be the objects of a class added together. It is also known as overloaded addition operator.\n#Now add __add__ method to String class\nprint(a + \"mani\")#it just add something to value of predefine \na()\nprint(a.name == \"mani\")  # campare the value of variable\n# method overloading\n# like using parents method with some extra modifications",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "m = son(\"mani\", \"100000\", \"python\", \"5 year\")\nm.show()\nprint(m.salaryplus(10000))\n#the above is used for addind or doing something extra with perents method\n#opperator overloading\n#__add__  __subreact__ etc\nclass parenst():\n  def __init__(self, name, salary):\n    self.name = name\n    self.sal = salary",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "a = parenst(\"mani\", 10000)\nprint(a - 100)\nprint(a + 1000)  \nprint(a * 2)\nprint(a / 10)\n#multiple inheritage\nclass Employee:\n  def __init__(self, name):\n    self.name = name\n  def show(self):",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "o = Dog(\"tommy\", \"Black\")\no.show_details()\nprint(GoldenRetriever.mro())\n#mullti levell inheritage above\n#Hybrid class\n# Example of a hybrid class\nclass parent():\n  pass\nclass ParentClass1(parent):\n  pass",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "seconds = time.time()\nfor01()\nprint(time.time() - seconds)\nsec = time.time()\nwhile01()\nprint(time.time() - sec)\n#to find the time how much time an funtion take to perform task\nimport time\n#sleep in time\nprint(\"zero second\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "sec",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "sec = time.time()\nwhile01()\nprint(time.time() - sec)\n#to find the time how much time an funtion take to perform task\nimport time\n#sleep in time\nprint(\"zero second\")\ntime.sleep(3)#it just wait for 3 sec befor excicuting below code\nprint(\"it's after 3 sec\")\nprint(str(time.localtime()))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "t = (2024, 4, 27, 15, 20, 26, 4, 118, 0)\nresult = time.asctime(t)\nprint(\"Result:\", result)#it's just like tuple number to year date and time etc\n#In Python, the asctime() function takes struct_time as an argument and returns a string representing it.\n#Similar to mktime(), the time_tuple has the following structure:\n#(year, month, day, hour, minute, second, weekday, day of the year, daylight saving)\nimport argparse\nparser = argparse.ArgumentParser(description ='Process some integers.')\nparser.add_argument('integers', metavar ='N', \n\t\t\t\t\ttype = int, nargs ='+',",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "result = time.asctime(t)\nprint(\"Result:\", result)#it's just like tuple number to year date and time etc\n#In Python, the asctime() function takes struct_time as an argument and returns a string representing it.\n#Similar to mktime(), the time_tuple has the following structure:\n#(year, month, day, hour, minute, second, weekday, day of the year, daylight saving)\nimport argparse\nparser = argparse.ArgumentParser(description ='Process some integers.')\nparser.add_argument('integers', metavar ='N', \n\t\t\t\t\ttype = int, nargs ='+',\n\t\t\t\t\thelp ='an integer for the accumulator')",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "parser = argparse.ArgumentParser(description ='Process some integers.')\nparser.add_argument('integers', metavar ='N', \n\t\t\t\t\ttype = int, nargs ='+',\n\t\t\t\t\thelp ='an integer for the accumulator')\nparser.add_argument(dest ='accumulate', \n\t\t\t\t\taction ='store_const',\n\t\t\t\t\tconst = sum, \n\t\t\t\t\thelp ='sum the integers')\nargs = parser.parse_args()\nprint(args.accumulate(args.integers))",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\ttype",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "\t\t\t\t\ttype = int, nargs ='+',\n\t\t\t\t\thelp ='an integer for the accumulator')\nparser.add_argument(dest ='accumulate', \n\t\t\t\t\taction ='store_const',\n\t\t\t\t\tconst = sum, \n\t\t\t\t\thelp ='sum the integers')\nargs = parser.parse_args()\nprint(args.accumulate(args.integers))\nimport argparse\nparser = argparse.ArgumentParser()",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tconst",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "\t\t\t\t\tconst = sum, \n\t\t\t\t\thelp ='sum the integers')\nargs = parser.parse_args()\nprint(args.accumulate(args.integers))\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"echo\")\nargs = parser.parse_args()\nprint(args.echo)\nimport argparse",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "args = parser.parse_args()\nprint(args.accumulate(args.integers))\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"echo\")\nargs = parser.parse_args()\nprint(args.echo)\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", help=\"display a square of a given number\",",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"echo\")\nargs = parser.parse_args()\nprint(args.echo)\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", help=\"display a square of a given number\",\n                    type=int)\nargs = parser.parse_args()\nprint(args.square**2)",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "args = parser.parse_args()\nprint(args.echo)\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", help=\"display a square of a given number\",\n                    type=int)\nargs = parser.parse_args()\nprint(args.square**2)\nimport argparse\nparser = argparse.ArgumentParser(description='Process some integers.')",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"square\", help=\"display a square of a given number\",\n                    type=int)\nargs = parser.parse_args()\nprint(args.square**2)\nimport argparse\nparser = argparse.ArgumentParser(description='Process some integers.')\nparser.add_argument('integers', metavar='N', type=int, nargs='+',\n                    help='an integer for the accumulator')\nparser.add_argument('--sum', dest='accumulate', action='store_const',",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "args = parser.parse_args()\nprint(args.square**2)\nimport argparse\nparser = argparse.ArgumentParser(description='Process some integers.')\nparser.add_argument('integers', metavar='N', type=int, nargs='+',\n                    help='an integer for the accumulator')\nparser.add_argument('--sum', dest='accumulate', action='store_const',\n                    const=sum, default=max,\n                    help='sum the integers (default: find the max)')\nargs = parser.parse_args()",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "parser = argparse.ArgumentParser(description='Process some integers.')\nparser.add_argument('integers', metavar='N', type=int, nargs='+',\n                    help='an integer for the accumulator')\nparser.add_argument('--sum', dest='accumulate', action='store_const',\n                    const=sum, default=max,\n                    help='sum the integers (default: find the max)')\nargs = parser.parse_args()\nprint(args.accumulate(args.integers))\nimport argparse\n# Create an ArgumentParser object",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "args = parser.parse_args()\nprint(args.accumulate(args.integers))\nimport argparse\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='A simple script to greet users')\n# Add a positional argument\nparser.add_argument('name', help='Name of the user', nargs='+')#here name is the argument first thing is argument\n#we dont need to specify anythingf at the end just enter the value in this case\n# Parse the command-line arguments\nparser.add_argument('--sum', help='sum the integers (default: find the max)', nargs='+')",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "parser = argparse.ArgumentParser(description='A simple script to greet users')\n# Add a positional argument\nparser.add_argument('name', help='Name of the user', nargs='+')#here name is the argument first thing is argument\n#we dont need to specify anythingf at the end just enter the value in this case\n# Parse the command-line arguments\nparser.add_argument('--sum', help='sum the integers (default: find the max)', nargs='+')\nargs = parser.parse_args()#we say that evry thing done now arrange it by your self\n# Access the value of the positional argument\nif args.name:\n  print(f\"Hello, {args.name}!\")",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "100dayschellenge.mani",
        "description": "100dayschellenge.mani",
        "peekOfCode": "args = parser.parse_args()#we say that evry thing done now arrange it by your self\n# Access the value of the positional argument\nif args.name:\n  print(f\"Hello, {args.name}!\")\nif args.sum:  \n  a = 0\n  for i in args.sum:\n    a += int(i)\n  print(a)\n'''",
        "detail": "100dayschellenge.mani",
        "documentation": {}
    },
    {
        "label": "name1",
        "kind": 2,
        "importPath": "100dayschellenge.manie",
        "description": "100dayschellenge.manie",
        "peekOfCode": "def name1():\n    print(\"mani gupta\")\nprint(__name__)#ye batata hai ki isko kaha se call kar rahe hai same file se ya kisi aur file se as module leke\nif __name__ == \"__main__\":\n    name1()",
        "detail": "100dayschellenge.manie",
        "documentation": {}
    },
    {
        "label": "replacefun",
        "kind": 2,
        "importPath": "100dayschellenge.replace_num",
        "description": "100dayschellenge.replace_num",
        "peekOfCode": "def replacefun(b, d):\n    a = [1, 234, 65, 56, 436, 7456]\n    c = []\n    for i in a:\n        if i == b:\n            c.append(d)\n        else:\n            c.append(i)\n    print(c)\nb = int(input(\"Enter the number which you want to replace\"))",
        "detail": "100dayschellenge.replace_num",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100dayschellenge.replace_num",
        "description": "100dayschellenge.replace_num",
        "peekOfCode": "b = int(input(\"Enter the number which you want to replace\"))\nd = int(input(\"Enter the number which can replace\"))\nreplacefun(b, d)",
        "detail": "100dayschellenge.replace_num",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "100dayschellenge.replace_num",
        "description": "100dayschellenge.replace_num",
        "peekOfCode": "d = int(input(\"Enter the number which can replace\"))\nreplacefun(b, d)",
        "detail": "100dayschellenge.replace_num",
        "documentation": {}
    },
    {
        "label": "TestPrint",
        "kind": 6,
        "importPath": "100dayschellenge.test_mani",
        "description": "100dayschellenge.test_mani",
        "peekOfCode": "class TestPrint(unittest.TestCase):\n    def test_print_hello(self):\n        self.assertEqual(print(\"hello\"), None)\n    def test_print_string(self):\n        self.assertEqual(print(\"This is a test\"), None)\n    def test_print_number(self):\n        self.assertEqual(print(123), None)\n    def test_print_multiple_args(self):\n        self.assertEqual(print(\"hello\", 123, [1,2,3]), None)\nif __name__ == '__main__':",
        "detail": "100dayschellenge.test_mani",
        "documentation": {}
    },
    {
        "label": "gfg",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "gfg = \"geeksforgeeks\"\n# Reverse the string using reversed and join function \ngfg = \"\".join(reversed(gfg)) \nprint(gfg) \n# Escaping Single Quote \nString1 = 'I\\'m a \"Geek\"'\n#\\ is not count for \\ in in outpute use \\\\ one for skiping and one for print.\nprint(\"\\nEscaping Single Quote: \") \nprint(String1) \n# eg for the above.",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "gfg",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "gfg = \"\".join(reversed(gfg)) \nprint(gfg) \n# Escaping Single Quote \nString1 = 'I\\'m a \"Geek\"'\n#\\ is not count for \\ in in outpute use \\\\ one for skiping and one for print.\nprint(\"\\nEscaping Single Quote: \") \nprint(String1) \n# eg for the above.\n# Printing Paths with the \n# use of Escape Sequences ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "String1 = 'I\\'m a \"Geek\"'\n#\\ is not count for \\ in in outpute use \\\\ one for skiping and one for print.\nprint(\"\\nEscaping Single Quote: \") \nprint(String1) \n# eg for the above.\n# Printing Paths with the \n# use of Escape Sequences \nString1 = \"C:\\\\Python\\\\Geeks\\\\\"\nprint(\"\\nEscaping Backslashes: \") \nprint(String1) ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "String1 = \"C:\\\\Python\\\\Geeks\\\\\"\nprint(\"\\nEscaping Backslashes: \") \nprint(String1) \n# Python Program for \n# Formatting of Strings \n# Default order \nString1 = \"{} {} {}\".format('Geeks', 'For', 'Life') \nprint(\"Print String in default order: \") \nprint(String1) \n# Positional Formatting ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "String1 = \"{} {} {}\".format('Geeks', 'For', 'Life') \nprint(\"Print String in default order: \") \nprint(String1) \n# Positional Formatting \nString1 = \"{1} {0} {2}\".format('Geeks', 'For', 'Life') \nprint(\"\\nPrint String in Positional order: \") \nprint(String1) \n# Keyword Formatting \nString1 = \"{l} {f} {g}\".format(g='Geeks', f='For', l='Life') \nprint(\"\\nPrint String in order of Keywords: \") ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "String1 = \"{1} {0} {2}\".format('Geeks', 'For', 'Life') \nprint(\"\\nPrint String in Positional order: \") \nprint(String1) \n# Keyword Formatting \nString1 = \"{l} {f} {g}\".format(g='Geeks', f='For', l='Life') \nprint(\"\\nPrint String in order of Keywords: \") \n# Python Program for \n# Old Style Formatting \n# of Integers \nInteger1 = 12.3456789",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "String1",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "String1 = \"{l} {f} {g}\".format(g='Geeks', f='For', l='Life') \nprint(\"\\nPrint String in order of Keywords: \") \n# Python Program for \n# Old Style Formatting \n# of Integers \nInteger1 = 12.3456789\nprint(\"Formatting in 3.2f format: \") \nprint('The value of Integer1 is %5f' % Integer1) \nprint(\"\\nFormatting in 3.4f format: \") \nprint('The value of Integer1 is %3.4f' % Integer1) ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "Integer1",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "Integer1 = 12.3456789\nprint(\"Formatting in 3.2f format: \") \nprint('The value of Integer1 is %5f' % Integer1) \nprint(\"\\nFormatting in 3.4f format: \") \nprint('The value of Integer1 is %3.4f' % Integer1) \n#The output of the boolean operations between the strings depends on the following things: \n#Python considers empty strings as having a boolean value of the ‘false’ and non-empty strings as having a boolean value of ‘true’.\n#For the ‘and’ operator if the left value is true, then the right value is checked and returned. If the left value is false, then it is returned\n#For the ‘or’ operator if the left value is true, then it is returned, otherwise, if the left value is false, then the right value is returned.\na = '' ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "a = '' \nb = 'mani'\n# repr is used to print the string along with the quotes \n# Returns a \nprint(repr(a and b)) \n# Returns a \nprint(repr(b and a)) \n# Returns b\t \nprint(repr(a or b)) \n# Returns b ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "b = 'mani'\n# repr is used to print the string along with the quotes \n# Returns a \nprint(repr(a and b)) \n# Returns a \nprint(repr(b and a)) \n# Returns b\t \nprint(repr(a or b)) \n# Returns b \nprint(repr(b or a))\t ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "a = 'for'\n# Returns b \nprint(repr(a and b)) \n# Returns a \nprint(repr(b and a)) \n# Returns a\t \nprint(repr(a or b)) \n# Returns b\t \nprint(repr(b or a))\t \na='the python king'",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "a = '' \n# Returns True \nprint(repr(not a))\nprint(\"mani Gupta\")\n#it just print anything \nprint(String1) \n'''\n#In Python, a string of required formatting can be achieved by different methods. Some of them are; 1) Using % 2) Using {} 3) Using Template Strings In this article the formatting using % is discussed. The formatting using % is similar to that of ‘printf’ in C programming language. %d – integer %f – float %s – string %x – hexadecimal %o – octal The below example describes the use of formatting using % in Python. \n# Python program to demonstrate the use of formatting using % \n# Initialize variable as a string ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "variable",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "variable = 15\nstring = \"Variable as string = %s\" %(variable) \nprint (string ) \n# Printing as raw data \nprint (\"Variable as raw data = %r\" %(variable)) \n# Convert the variable to integer \n# And perform check other formatting options \nvariable = int(variable) # Without this the below statement \n\t\t\t\t\t\t# will give error. \nstring = \"Variable as integer = %d\" %(variable) ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "string = \"Variable as string = %s\" %(variable) \nprint (string ) \n# Printing as raw data \nprint (\"Variable as raw data = %r\" %(variable)) \n# Convert the variable to integer \n# And perform check other formatting options \nvariable = int(variable) # Without this the below statement \n\t\t\t\t\t\t# will give error. \nstring = \"Variable as integer = %d\" %(variable) \nprint (string) ",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "variable",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "variable = int(variable) # Without this the below statement \n\t\t\t\t\t\t# will give error. \nstring = \"Variable as integer = %d\" %(variable) \nprint (string) \nprint (\"Variable as float = %f\" %(variable)) \n# printing as any string or char after a mark \nprint (\"Variable as printing with special char = %c\" %(variable)) \nprint (\"Variable as hexadecimal = %x\" %(variable)) \nprint (\"Variable as octal = %o\" %(variable)) \na = \"M\"",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "string = \"Variable as integer = %d\" %(variable) \nprint (string) \nprint (\"Variable as float = %f\" %(variable)) \n# printing as any string or char after a mark \nprint (\"Variable as printing with special char = %c\" %(variable)) \nprint (\"Variable as hexadecimal = %x\" %(variable)) \nprint (\"Variable as octal = %o\" %(variable)) \na = \"M\"\nprint(\"this is use of %%c = %c\" %(a))\n#it just use full for only one character>",
        "detail": "test_primefactor",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "test_primefactor",
        "description": "test_primefactor",
        "peekOfCode": "a = \"M\"\nprint(\"this is use of %%c = %c\" %(a))\n#it just use full for only one character>\n#for multiple character use *",
        "detail": "test_primefactor",
        "documentation": {}
    }
]